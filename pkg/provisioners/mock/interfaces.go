// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cd "github.com/eschercloudai/unikorn/pkg/cd"
	provisioners "github.com/eschercloudai/unikorn/pkg/provisioners"
	gomock "go.uber.org/mock/gomock"
	api "k8s.io/client-go/tools/clientcmd/api"
	client "sigs.k8s.io/controller-runtime/pkg/client"
)

// MockRemoteCluster is a mock of RemoteCluster interface.
type MockRemoteCluster struct {
	ctrl     *gomock.Controller
	recorder *MockRemoteClusterMockRecorder
}

// MockRemoteClusterMockRecorder is the mock recorder for MockRemoteCluster.
type MockRemoteClusterMockRecorder struct {
	mock *MockRemoteCluster
}

// NewMockRemoteCluster creates a new mock instance.
func NewMockRemoteCluster(ctrl *gomock.Controller) *MockRemoteCluster {
	mock := &MockRemoteCluster{ctrl: ctrl}
	mock.recorder = &MockRemoteClusterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRemoteCluster) EXPECT() *MockRemoteClusterMockRecorder {
	return m.recorder
}

// Config mocks base method.
func (m *MockRemoteCluster) Config(ctx context.Context) (*api.Config, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Config", ctx)
	ret0, _ := ret[0].(*api.Config)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Config indicates an expected call of Config.
func (mr *MockRemoteClusterMockRecorder) Config(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Config", reflect.TypeOf((*MockRemoteCluster)(nil).Config), ctx)
}

// ID mocks base method.
func (m *MockRemoteCluster) ID() *cd.ResourceIdentifier {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ID")
	ret0, _ := ret[0].(*cd.ResourceIdentifier)
	return ret0
}

// ID indicates an expected call of ID.
func (mr *MockRemoteClusterMockRecorder) ID() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ID", reflect.TypeOf((*MockRemoteCluster)(nil).ID))
}

// MockProvisioner is a mock of Provisioner interface.
type MockProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockProvisionerMockRecorder
}

// MockProvisionerMockRecorder is the mock recorder for MockProvisioner.
type MockProvisionerMockRecorder struct {
	mock *MockProvisioner
}

// NewMockProvisioner creates a new mock instance.
func NewMockProvisioner(ctrl *gomock.Controller) *MockProvisioner {
	mock := &MockProvisioner{ctrl: ctrl}
	mock.recorder = &MockProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProvisioner) EXPECT() *MockProvisionerMockRecorder {
	return m.recorder
}

// BackgroundDeletion mocks base method.
func (m *MockProvisioner) BackgroundDeletion() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BackgroundDeletion")
}

// BackgroundDeletion indicates an expected call of BackgroundDeletion.
func (mr *MockProvisionerMockRecorder) BackgroundDeletion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackgroundDeletion", reflect.TypeOf((*MockProvisioner)(nil).BackgroundDeletion))
}

// Deprovision mocks base method.
func (m *MockProvisioner) Deprovision(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deprovision", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deprovision indicates an expected call of Deprovision.
func (mr *MockProvisionerMockRecorder) Deprovision(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deprovision", reflect.TypeOf((*MockProvisioner)(nil).Deprovision), arg0)
}

// OnRemote mocks base method.
func (m *MockProvisioner) OnRemote(remote provisioners.RemoteCluster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRemote", remote)
}

// OnRemote indicates an expected call of OnRemote.
func (mr *MockProvisionerMockRecorder) OnRemote(remote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemote", reflect.TypeOf((*MockProvisioner)(nil).OnRemote), remote)
}

// Provision mocks base method.
func (m *MockProvisioner) Provision(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Provision indicates an expected call of Provision.
func (mr *MockProvisionerMockRecorder) Provision(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockProvisioner)(nil).Provision), arg0)
}

// ProvisionerName mocks base method.
func (m *MockProvisioner) ProvisionerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProvisionerName indicates an expected call of ProvisionerName.
func (mr *MockProvisionerMockRecorder) ProvisionerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionerName", reflect.TypeOf((*MockProvisioner)(nil).ProvisionerName))
}

// MockManagerProvisioner is a mock of ManagerProvisioner interface.
type MockManagerProvisioner struct {
	ctrl     *gomock.Controller
	recorder *MockManagerProvisionerMockRecorder
}

// MockManagerProvisionerMockRecorder is the mock recorder for MockManagerProvisioner.
type MockManagerProvisionerMockRecorder struct {
	mock *MockManagerProvisioner
}

// NewMockManagerProvisioner creates a new mock instance.
func NewMockManagerProvisioner(ctrl *gomock.Controller) *MockManagerProvisioner {
	mock := &MockManagerProvisioner{ctrl: ctrl}
	mock.recorder = &MockManagerProvisionerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockManagerProvisioner) EXPECT() *MockManagerProvisionerMockRecorder {
	return m.recorder
}

// BackgroundDeletion mocks base method.
func (m *MockManagerProvisioner) BackgroundDeletion() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "BackgroundDeletion")
}

// BackgroundDeletion indicates an expected call of BackgroundDeletion.
func (mr *MockManagerProvisionerMockRecorder) BackgroundDeletion() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BackgroundDeletion", reflect.TypeOf((*MockManagerProvisioner)(nil).BackgroundDeletion))
}

// Deprovision mocks base method.
func (m *MockManagerProvisioner) Deprovision(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Deprovision", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Deprovision indicates an expected call of Deprovision.
func (mr *MockManagerProvisionerMockRecorder) Deprovision(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Deprovision", reflect.TypeOf((*MockManagerProvisioner)(nil).Deprovision), arg0)
}

// Object mocks base method.
func (m *MockManagerProvisioner) Object() client.Object {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Object")
	ret0, _ := ret[0].(client.Object)
	return ret0
}

// Object indicates an expected call of Object.
func (mr *MockManagerProvisionerMockRecorder) Object() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Object", reflect.TypeOf((*MockManagerProvisioner)(nil).Object))
}

// OnRemote mocks base method.
func (m *MockManagerProvisioner) OnRemote(remote provisioners.RemoteCluster) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "OnRemote", remote)
}

// OnRemote indicates an expected call of OnRemote.
func (mr *MockManagerProvisionerMockRecorder) OnRemote(remote any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OnRemote", reflect.TypeOf((*MockManagerProvisioner)(nil).OnRemote), remote)
}

// Provision mocks base method.
func (m *MockManagerProvisioner) Provision(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Provision", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Provision indicates an expected call of Provision.
func (mr *MockManagerProvisionerMockRecorder) Provision(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Provision", reflect.TypeOf((*MockManagerProvisioner)(nil).Provision), arg0)
}

// ProvisionerName mocks base method.
func (m *MockManagerProvisioner) ProvisionerName() string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProvisionerName")
	ret0, _ := ret[0].(string)
	return ret0
}

// ProvisionerName indicates an expected call of ProvisionerName.
func (mr *MockManagerProvisionerMockRecorder) ProvisionerName() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProvisionerName", reflect.TypeOf((*MockManagerProvisioner)(nil).ProvisionerName))
}
