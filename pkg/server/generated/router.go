// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"context"
	"fmt"
	"net/http"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/go-chi/chi/v5"
)

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/auth/tokens/password)
	PostApiV1AuthTokensPassword(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/auth/tokens/token)
	PostApiV1AuthTokensToken(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/projects)
	GetApiV1Projects(w http.ResponseWriter, r *http.Request)

	// (POST /api/v1/projects)
	PostApiV1Projects(w http.ResponseWriter, r *http.Request)

	// (DELETE /api/v1/projects/{project})
	DeleteApiV1ProjectsProject(w http.ResponseWriter, r *http.Request, project Project)

	// (GET /api/v1/projects/{project})
	GetApiV1ProjectsProject(w http.ResponseWriter, r *http.Request, project Project)

	// (GET /api/v1/projects/{project}/controlplanes)
	GetApiV1ProjectsProjectControlplanes(w http.ResponseWriter, r *http.Request, project Project)

	// (POST /api/v1/projects/{project}/controlplanes)
	PostApiV1ProjectsProjectControlplanes(w http.ResponseWriter, r *http.Request, project Project)

	// (DELETE /api/v1/projects/{project}/controlplanes/{controlPlane})
	DeleteApiV1ProjectsProjectControlplanesControlPlane(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane)

	// (GET /api/v1/projects/{project}/controlplanes/{controlPlane})
	GetApiV1ProjectsProjectControlplanesControlPlane(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane)

	// (PUT /api/v1/projects/{project}/controlplanes/{controlPlane})
	PutApiV1ProjectsProjectControlplanesControlPlane(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane)

	// (GET /api/v1/projects/{project}/controlplanes/{controlPlane}/clusters)
	GetApiV1ProjectsProjectControlplanesControlPlaneClusters(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane)

	// (POST /api/v1/projects/{project}/controlplanes/{controlPlane}/clusters)
	PostApiV1ProjectsProjectControlplanesControlPlaneClusters(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane)

	// (DELETE /api/v1/projects/{project}/controlplanes/{controlPlane}/clusters/{cluster})
	DeleteApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane, cluster Cluster)

	// (GET /api/v1/projects/{project}/controlplanes/{controlPlane}/clusters/{cluster})
	GetApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane, cluster Cluster)

	// (PUT /api/v1/projects/{project}/controlplanes/{controlPlane}/clusters/{cluster})
	PutApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w http.ResponseWriter, r *http.Request, project Project, controlPlane ControlPlane, cluster Cluster)

	// (GET /api/v1/providers/openstack/availability-zones)
	GetApiV1ProvidersOpenstackAvailabilityZones(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/providers/openstack/external-networks)
	GetApiV1ProvidersOpenstackExternalNetworks(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/providers/openstack/flavors)
	GetApiV1ProvidersOpenstackFlavors(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/providers/openstack/images)
	GetApiV1ProvidersOpenstackImages(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/providers/openstack/projects)
	GetApiV1ProvidersOpenstackProjects(w http.ResponseWriter, r *http.Request)

	// (GET /api/v1/providers/openstack/ssh-keys)
	GetApiV1ProvidersOpenstackSshKeys(w http.ResponseWriter, r *http.Request)
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler            ServerInterface
	HandlerMiddlewares []MiddlewareFunc
	ErrorHandlerFunc   func(w http.ResponseWriter, r *http.Request, err error)
}

type MiddlewareFunc func(http.Handler) http.Handler

// PostApiV1AuthTokensPassword operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1AuthTokensPassword(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, HttpBasicAuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1AuthTokensPassword(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1AuthTokensToken operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1AuthTokensToken(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1AuthTokensToken(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1Projects operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1Projects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1Projects(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1Projects operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1Projects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1Projects(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1ProjectsProject operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1ProjectsProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1ProjectsProject(w, r, project)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProjectsProject operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectsProject(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProjectsProject(w, r, project)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProjectsProjectControlplanes operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectsProjectControlplanes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProjectsProjectControlplanes(w, r, project)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1ProjectsProjectControlplanes operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1ProjectsProjectControlplanes(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1ProjectsProjectControlplanes(w, r, project)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1ProjectsProjectControlplanesControlPlane operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1ProjectsProjectControlplanesControlPlane(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1ProjectsProjectControlplanesControlPlane(w, r, project, controlPlane)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProjectsProjectControlplanesControlPlane operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectsProjectControlplanesControlPlane(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProjectsProjectControlplanesControlPlane(w, r, project, controlPlane)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1ProjectsProjectControlplanesControlPlane operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1ProjectsProjectControlplanesControlPlane(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1ProjectsProjectControlplanesControlPlane(w, r, project, controlPlane)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProjectsProjectControlplanesControlPlaneClusters operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectsProjectControlplanesControlPlaneClusters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProjectsProjectControlplanesControlPlaneClusters(w, r, project, controlPlane)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PostApiV1ProjectsProjectControlplanesControlPlaneClusters operation middleware
func (siw *ServerInterfaceWrapper) PostApiV1ProjectsProjectControlplanesControlPlaneClusters(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PostApiV1ProjectsProjectControlplanesControlPlaneClusters(w, r, project, controlPlane)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// DeleteApiV1ProjectsProjectControlplanesControlPlaneClustersCluster operation middleware
func (siw *ServerInterfaceWrapper) DeleteApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	// ------------- Path parameter "cluster" -------------
	var cluster Cluster

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster", runtime.ParamLocationPath, chi.URLParam(r, "cluster"), &cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.DeleteApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w, r, project, controlPlane, cluster)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProjectsProjectControlplanesControlPlaneClustersCluster operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	// ------------- Path parameter "cluster" -------------
	var cluster Cluster

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster", runtime.ParamLocationPath, chi.URLParam(r, "cluster"), &cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w, r, project, controlPlane, cluster)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// PutApiV1ProjectsProjectControlplanesControlPlaneClustersCluster operation middleware
func (siw *ServerInterfaceWrapper) PutApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	var err error

	// ------------- Path parameter "project" -------------
	var project Project

	err = runtime.BindStyledParameterWithLocation("simple", false, "project", runtime.ParamLocationPath, chi.URLParam(r, "project"), &project)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "project", Err: err})
		return
	}

	// ------------- Path parameter "controlPlane" -------------
	var controlPlane ControlPlane

	err = runtime.BindStyledParameterWithLocation("simple", false, "controlPlane", runtime.ParamLocationPath, chi.URLParam(r, "controlPlane"), &controlPlane)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "controlPlane", Err: err})
		return
	}

	// ------------- Path parameter "cluster" -------------
	var cluster Cluster

	err = runtime.BindStyledParameterWithLocation("simple", false, "cluster", runtime.ParamLocationPath, chi.URLParam(r, "cluster"), &cluster)
	if err != nil {
		siw.ErrorHandlerFunc(w, r, &InvalidParamFormatError{ParamName: "cluster", Err: err})
		return
	}

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.PutApiV1ProjectsProjectControlplanesControlPlaneClustersCluster(w, r, project, controlPlane, cluster)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProvidersOpenstackAvailabilityZones operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProvidersOpenstackAvailabilityZones(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProvidersOpenstackAvailabilityZones(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProvidersOpenstackExternalNetworks operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProvidersOpenstackExternalNetworks(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProvidersOpenstackExternalNetworks(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProvidersOpenstackFlavors operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProvidersOpenstackFlavors(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProvidersOpenstackFlavors(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProvidersOpenstackImages operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProvidersOpenstackImages(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProvidersOpenstackImages(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProvidersOpenstackProjects operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProvidersOpenstackProjects(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{""})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProvidersOpenstackProjects(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

// GetApiV1ProvidersOpenstackSshKeys operation middleware
func (siw *ServerInterfaceWrapper) GetApiV1ProvidersOpenstackSshKeys(w http.ResponseWriter, r *http.Request) {
	ctx := r.Context()

	ctx = context.WithValue(ctx, Oauth2AuthenticationScopes, []string{"project"})

	var handler http.Handler = http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		siw.Handler.GetApiV1ProvidersOpenstackSshKeys(w, r)
	})

	for _, middleware := range siw.HandlerMiddlewares {
		handler = middleware(handler)
	}

	handler.ServeHTTP(w, r.WithContext(ctx))
}

type UnescapedCookieParamError struct {
	ParamName string
	Err       error
}

func (e *UnescapedCookieParamError) Error() string {
	return fmt.Sprintf("error unescaping cookie parameter '%s'", e.ParamName)
}

func (e *UnescapedCookieParamError) Unwrap() error {
	return e.Err
}

type UnmarshallingParamError struct {
	ParamName string
	Err       error
}

func (e *UnmarshallingParamError) Error() string {
	return fmt.Sprintf("Error unmarshalling parameter %s as JSON: %s", e.ParamName, e.Err.Error())
}

func (e *UnmarshallingParamError) Unwrap() error {
	return e.Err
}

type RequiredParamError struct {
	ParamName string
}

func (e *RequiredParamError) Error() string {
	return fmt.Sprintf("Query argument %s is required, but not found", e.ParamName)
}

type RequiredHeaderError struct {
	ParamName string
	Err       error
}

func (e *RequiredHeaderError) Error() string {
	return fmt.Sprintf("Header parameter %s is required, but not found", e.ParamName)
}

func (e *RequiredHeaderError) Unwrap() error {
	return e.Err
}

type InvalidParamFormatError struct {
	ParamName string
	Err       error
}

func (e *InvalidParamFormatError) Error() string {
	return fmt.Sprintf("Invalid format for parameter %s: %s", e.ParamName, e.Err.Error())
}

func (e *InvalidParamFormatError) Unwrap() error {
	return e.Err
}

type TooManyValuesForParamError struct {
	ParamName string
	Count     int
}

func (e *TooManyValuesForParamError) Error() string {
	return fmt.Sprintf("Expected one value for %s, got %d", e.ParamName, e.Count)
}

// Handler creates http.Handler with routing matching OpenAPI spec.
func Handler(si ServerInterface) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{})
}

type ChiServerOptions struct {
	BaseURL          string
	BaseRouter       chi.Router
	Middlewares      []MiddlewareFunc
	ErrorHandlerFunc func(w http.ResponseWriter, r *http.Request, err error)
}

// HandlerFromMux creates http.Handler with routing matching OpenAPI spec based on the provided mux.
func HandlerFromMux(si ServerInterface, r chi.Router) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseRouter: r,
	})
}

func HandlerFromMuxWithBaseURL(si ServerInterface, r chi.Router, baseURL string) http.Handler {
	return HandlerWithOptions(si, ChiServerOptions{
		BaseURL:    baseURL,
		BaseRouter: r,
	})
}

// HandlerWithOptions creates http.Handler with additional options
func HandlerWithOptions(si ServerInterface, options ChiServerOptions) http.Handler {
	r := options.BaseRouter

	if r == nil {
		r = chi.NewRouter()
	}
	if options.ErrorHandlerFunc == nil {
		options.ErrorHandlerFunc = func(w http.ResponseWriter, r *http.Request, err error) {
			http.Error(w, err.Error(), http.StatusBadRequest)
		}
	}
	wrapper := ServerInterfaceWrapper{
		Handler:            si,
		HandlerMiddlewares: options.Middlewares,
		ErrorHandlerFunc:   options.ErrorHandlerFunc,
	}

	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/tokens/password", wrapper.PostApiV1AuthTokensPassword)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/auth/tokens/token", wrapper.PostApiV1AuthTokensToken)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/projects", wrapper.GetApiV1Projects)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/projects", wrapper.PostApiV1Projects)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/projects/{project}", wrapper.DeleteApiV1ProjectsProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/projects/{project}", wrapper.GetApiV1ProjectsProject)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/projects/{project}/controlplanes", wrapper.GetApiV1ProjectsProjectControlplanes)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/projects/{project}/controlplanes", wrapper.PostApiV1ProjectsProjectControlplanes)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}", wrapper.DeleteApiV1ProjectsProjectControlplanesControlPlane)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}", wrapper.GetApiV1ProjectsProjectControlplanesControlPlane)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}", wrapper.PutApiV1ProjectsProjectControlplanesControlPlane)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}/clusters", wrapper.GetApiV1ProjectsProjectControlplanesControlPlaneClusters)
	})
	r.Group(func(r chi.Router) {
		r.Post(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}/clusters", wrapper.PostApiV1ProjectsProjectControlplanesControlPlaneClusters)
	})
	r.Group(func(r chi.Router) {
		r.Delete(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}/clusters/{cluster}", wrapper.DeleteApiV1ProjectsProjectControlplanesControlPlaneClustersCluster)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}/clusters/{cluster}", wrapper.GetApiV1ProjectsProjectControlplanesControlPlaneClustersCluster)
	})
	r.Group(func(r chi.Router) {
		r.Put(options.BaseURL+"/api/v1/projects/{project}/controlplanes/{controlPlane}/clusters/{cluster}", wrapper.PutApiV1ProjectsProjectControlplanesControlPlaneClustersCluster)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/openstack/availability-zones", wrapper.GetApiV1ProvidersOpenstackAvailabilityZones)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/openstack/external-networks", wrapper.GetApiV1ProvidersOpenstackExternalNetworks)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/openstack/flavors", wrapper.GetApiV1ProvidersOpenstackFlavors)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/openstack/images", wrapper.GetApiV1ProvidersOpenstackImages)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/openstack/projects", wrapper.GetApiV1ProvidersOpenstackProjects)
	})
	r.Group(func(r chi.Router) {
		r.Get(options.BaseURL+"/api/v1/providers/openstack/ssh-keys", wrapper.GetApiV1ProvidersOpenstackSshKeys)
	})

	return r
}
