// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
