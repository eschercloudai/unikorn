// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"jacAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
