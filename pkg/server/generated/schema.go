// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
