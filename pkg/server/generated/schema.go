// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
