// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd63PbuLX/VzC8d+a2M7KdTbcf6m+Os5u62yae2Gnu3FXGA5FHEmoSYAFQjjaj//0O",
	"HnwDJCjJyXZXnzKR8TgAfueJg8MvUcyynFGgUkSXX6Icc5yBBK7/h/M8JTGWhNFrDglQSXB6WzZRLRIQ",
	"MSe5ahFdRu9yoELi+BE1eqK46ooozuA8mkVEtc6xXEezSP0WXbrnimYRh38XhEMSXUpewCwS8RoyrOb+",
	"bw7L6DL6r4t6CRfmr+JCSE7oqiZ1t5tFcVoICfwtzmBgDfdrQB8oeWScIttjiOzGoMclllHJWXqbYgpT",
	"KDbdUK76DdLdGf+IxO/MUCDkK5YQ8CPpvWml/q7IASo7TS/+JdQKvwSS4pzknd4mYeiaCNeaG857+6PO",
	"iAOWcN3YyWOvqHlKrhW4jz2I7J+KBXAKEsS1gfCxaX/sTjC0gJqaiulGVkGL1A2g3hyvIQUJKINoN4sk",
	"ewR6F7P86GdVjzyCtUKuFb4s3ETMckJXiNAl45n+zbFezVMiZ1RYfopjyCUk7+2PfalwrU5ZTWB5EZVd",
	"ztU2NJb5qqBJCs2Bjs2MZgYnC16hlAiJ2LLFggvTQVO6wIk9qaOTyNRRvPyBc+bEpp0WLViyRUtMUkiQ",
	"6Yo2OCWJPSsjrJcpiaX/NN6DYAWPQXGqainQE5FrhCmTa+DlIA05cuSljgmSK7cG6REmnpWyEYg4STQo",
	"IVQCpzi9A74Bro/0a8PliqKCwuccYgkJAtUMsTguOIdkhvIUsADEIWdcapJ78lHJQIUksgogncUS5JmQ",
	"HHCmhN7AiTpkq5mm4DWEH/vq4MjbF6QPhqh20ymen9BAWPYpNtikTP7ICjogqz9QvEgBSYaWhCYII27F",
	"hemvNd0ei5TbXJl6bPEviKVrDVYz/kNrRvY4JL6MKCQCsUcjuijTglFTyErlduU2847NiIPTeXhzzNhr",
	"L+RVyuLHO8k4XsHVBpMUL0hK5Pb/2HPIwHpB3amGkddYU6Mj+oWVYrEa+JpleSF/E0v54bMR9W9BPjH+",
	"+IxL6M4UugKw/RC1HdsL+DHFG8afkW47QSi5S9O8TeRNhlfPCQ8zfiiJRLdGco0lwlxZUVmOJVFCUwsj",
	"uSZCmQNS2dDthfwE21tMnnO7yxlCF/MIW5SrDm1CbzlTcvoZCS1nCCU0t+01nfY/R6fOjjtsDNhG55UH",
	"d3Qy9KhOItru2hMWSBRxDEIsC6M0CqoMQ8bJL21/7KsYnW3qjJdyriNIdoTO9MYX62v4K+t0dVwx7Xvn",
	"nOXApQ3lAE3eLf9Olo5BPq6BIrmGciwiENDkjC3PUrLUkSjj40aXUYIlnEmiA0/WTjGRJG3x6BiVK85V",
	"GkZVaKvXN+ewIfDkJE75Wh36iAKX7tEYbcFYCpiq4TbABTEH1qfGDmPbOMjZNR35n8266jE/zbommsMx",
	"F66zGnSaZxGRkInJDrpmLkMP5hxvO+T0Q2rT478m9IRY7sGW++CvhoPJAXvu2umWS+zYY49D3CU5gLcU",
	"VPonhf5gcdCJ/vwRLZlBaW/mCYyi/qIQIhtM4xxCSCwLEe4TlZGMO9PPA/H+rowdwSDOfZ5/INTb0Y8+",
	"yvuuqcNF8zvTZaStHbHswoRM9juvbm+cIuGICCs9awcwuvwRZGL8A8drQuGWsVSNsQQsCw5i8tJ/LDt6",
	"QX7duZvp84YxvidPba39lm02eZBKEh6DxWaRIihlOFH7On0zP7Z6B3Nsc/31dnaA0aXNxeZOYPcOtMFZ",
	"V7c3SICUhK5crJSm7AmSWw5L8tklN+7AKMck4SCE0u+6IZIM6b46FC70/xUTtCduCZVeFOHmdvM9ur55",
	"/b4zuhOBGaE3ZqTv+jJHFHp/rlLtK0qy0ddw/tVQRs+ExDTBPEH/e/7nF39Bd1dvzaKSpFyL2rlYbdVS",
	"nSUML6YaZSr1O+ehFpKJGKequ0OUOwRniRyUM5YiXPfvxie7CMjwZ5IV2XvQkBVueWgbIVpkC+BqC7lt",
	"XwGhsW5CJayA24UHjG4aTR29w3vdqWa9pQXx048NMdvdd2HgY0wunGqwKE/BdnGpgg67DZ3rDyZyqdqc",
	"lY36ZrQTL29r+dyl+bGPFSt+BsRCQoXmIH0DMGhNvH57Z+wj01YdWCEGeaXqYntY5nfyTZfRKUvAyKr+",
	"wHYPrBBRhOScbYjS2Uj1U/6J28thyT5j5izxDqmWRuK9SLVdPUN39U29H91Jm+uadQ/0kwtE75oaerrF",
	"1oh1DNpuDifo5nWwo3Lzur8rs+iJEwnvaLqtrrSd89xBzEEGzyV087D5YndQ2GFrmYb90KyWHi2jfIYw",
	"TTqSPYElLlLpRB20Y6yuXfUHVp07q6As1j/B9q3TbqxHu7v7K/oJtgrKRP2Upkowqn8yY8W6+XvD0iIL",
	"2LR/6nbH37MOO/nAOQwn/+F7F+g6qyDt1DQ//ZaB1zAY1UjTfKpGX8Vyo8f4sW2kdE/TCZEUL8DY6ThJ",
	"iFG8t21l1dXSui/a4LRwDzlElJlO2x15nm6RVR6VmGsMWB+Txfi+np3bKWvTNSFAU9MzGVLO/VTWMmS5",
	"3FZKf8z+DI8mDAN8zO533C4HBD6cd8v70jscAul4n8OmfBWPNT5un1dLDN4TX6RKkgxaYSodYzeRwiQ8",
	"ZpxACgET4U6unJpLd50y11HDbv1BdM4IlXZPA4Zzc1Rr66sZXfzVvGToUfQGKHAS24yWDITAK0ccFNy9",
	"r5DCKtjeVszB5xzroBQz1wV/vb+/tS1ilujBgRaZWguhOtfqwWaxRe3rloc4JUDVr8alf0iAEkh0K1Hk",
	"OeMSVF9zKfOgFz6rxhQ6Wc8YocAfzApmkYQsZxxzkm4fCmolvo6HUCYflqygaoIM5JolD+onG5DozJpB",
	"QrCZ8pPL8FGzPbQ2q2dBAF8wAeWeI/PXhdo4tWt6hHE0lMvqT+iEwnBuhSuMMJ5Z0cUKSQ6ynb0cOO2i",
	"QB38Hrb1zNw2E4EYTbfKHxKKWU3Trr71nAlJykzs4TMYtU7a2+8yTkIuWHT4uGenHni/MpAJMqDwhvNA",
	"AjWefwMdms+X7jGy2V1fJAzl030Z6vNiPMOEnVogAHsZMEEn58h/mXpw3bMYOjeT7jJyXCbJxWGf5D4t",
	"XEf2rm8/CHeocBXQ+83tBzFDZIkokzoaJ9fAQaex0LYD0RjYhR01bEHJvwuwq/FBJoOM8a2HzTNWUH1e",
	"phUiFL0hr9xU+KWFJWAq2GZmvysSB8FXpjEFYa5KYpqKNIueIYDpXCUXvpJuipLH/gXXaSpr9KlMmNC9",
	"9zN8R6BiRvYhhSVkSaaQl2IhUdntGBazGdqrou0NpgMF+lTK3AuUgcQJlrh/ArVn4yagEWwWkGEqSTyQ",
	"0TGL6IYkBL/mZON7jGVaoEQ3Cc8OaRDamaXPJkMcZhHXON3GNg5ynE3KC2K4iSl5U9nS8NwQV9q0uxG5",
	"XybbTTGFyj5Hs4CqDMGgnW3kB07dtXJPhvatGcgJu6ezoRnHlQsRj8G0mXiozgrQIncsPDusYmaRBuDY",
	"ICPShXvv+N5W+tsRDG6oSG9+WGMfgyUAr+8By3Gb62zt3CDgbKbnCG9UWZW9cx3ySq/UerRf2vi9DFI0",
	"hgxSVG9StsBpui21le0/zRjuBl7KQZQcIkaBaVe//HvCMkyO56VVabVB3F0n1U5l7vJQh5jbMtnwuZsA",
	"vyOuvvedhtu7Jr84hnhNxCNSfxqwPDvnoAdyHUHuhXk/c7i72CPkvfXo6b6FdmXZYkHiMg5WXTq6L5J1",
	"SnJ/jHbKr26FOAh7W9SJymWYpB77UAD/H4F0i+EL7XA6xnnKDDazhLkOtfGOtjfnLRbiifHE9YjWAegG",
	"PtwXMUucCvA/1S0FiX2jO9XFHxRmfVkzauWVy3E2FBAXnMjtnUKuoW4tZf5K4a19VE6Sef1YmHAQJiRr",
	"wNrea7UUzR06w0M1qNemJqzjyXvM+k71eYkWgLnOy1DQ7k+/TNlTeRGoA8EmSskS6P34gaeWLnF50eDm",
	"c1Br4HHKiuQ8ZtkFzsnF5jvzDEBc5BZn80ivluUdPEX3mjQiDPJ0+hU2IvauefQVnvekQ/8zj1rSRu+t",
	"yakhdMkcj/V+uLtfFqnNotP5FfrOuUqiLYRkWXWfIPTt8wed+CaJTKGRO2Ge0zbMkcvoxfnL8xelztFZ",
	"rdGfzl+c/0nxBpZrvU/lKvrJ7BfxWIJtaXQ60lnLNBNF6coVt/07EVKglbYpXLnx5uq9vD9D6N4Ecue0",
	"EOYMy2AuRvGaqX1jy9J6M52rnBcrDliJ4ZtEX5XIq5z887ur3rrLm7fOM/6XL174NFDV7sL/Vn83i74P",
	"GcHxhl53/W68q/Nxy24W/Tlk3qFX2U2ZFV3+/MUjNH7+tPukmg5BajCR310i4/nQ1c5Q/6oYa+flnoB2",
	"GNAKue6qgwGDZIHV8XbNkgakcibkoBGlBPEKEypkbaqbzCAOsuBUIIwEWVE1DU0Q0JhvcwkJMuuZ0799",
	"vC/xZjTnGqs+cYpJZuI0CpxqBu0FtSuSVBrTGnJz2hgoxhQttMVoEMzSFNlLT4dno8kr8hXHiX7Tjue0",
	"aUjpMayt2Ib2LRMW24Vcaw0ryv3dC8/tl4K/KQx7TTsF41n0+YyyswVLtnX5GBeuPZa9MW6Ojui7b4/o",
	"kTbKoGtDdYaESaz/28d79dcVx1RCMqfqt3lpEM4j03xmuEK5dhnjOhtfp2UtwD45MCHzUdTfWyepLqO1",
	"9eOnUWnrol/daHdinD2Ev9XiuedhmtumCDQgcJp63rOVaIakFbqC1JSUsZ0qaeq3Da5b5O+DAHfNn2+I",
	"hO9ffD/euVdp5WtCqHbPd592Pumoq3IpuYgoPHmq9g2cPfIefSVF+mc/UYb4q9r1ZcnLAKOyW6nsm4Lo",
	"L0HQbxfz+mYg8gmkiy/d6o07g7QUpCviqn9XmHPjbclZFgQ6axMSrYOxiHGic/iqMI7OYidpahMqtaSr",
	"RVozb7WNXUNgH73XrhqVUyVZq3rSSYCFC7CjqLw3II8AvDBFdxS4OKvwnWAzQe81Kgj/7J6/bnLhL3Or",
	"3Ji8cEDqQ57gIXE2TZLJbU5icwNpvVudNbFFgi3lE+ZQx2YyTPEKErTYqsHntKAJ8HRr36tKQgtW6GRy",
	"sgG+beU+dHR1EYreiaq7WRN1dxKWv0ZFXQbAxXgEPMifaLsTduxBHuhVFdlDtFZPV/YB2UAJxxPkvpGg",
	"HXBWur5K+Xhqf4i5fZVBjO3lw3hLXJ8cmV+/fLz40iitH+DfNO0BC9GmfYlDwRnqjJTwvO58AOCkcr+t",
	"fxKqPN+AHIHMs2vPQ6Hjr9l8wtE30KOz8c6uL5CMODoOkIbjs/ZzOt5N6yML2mSE89U56ietCsT4nJZ1",
	"ef7wZN6uFJJlWJIYlX8gQj9vgSxP2RaSP5prnno+TLdzWrlU5e6AVP6S6dJcVUmd8bRQ7WjNad/TOtTR",
	"8nHjyff6zfpebdtCy1FTceoITplbrzQrGumZjqc66s8GHEeJOD5DcELjf5I6aXBEK0F6+HZANr4iVd6B",
	"YyFYTLC00lm3aSQEQGKTiOe0l/lYZz6FXxYY6W5vC9o3o6p10AVCmSS/j4d3ksBHNcWrTIqgS4Jj488r",
	"X70ICdi7bhH0E0ie50L8WQBQhZ0OkRGnKNC+EBjMStM5r4lSatVTpmY66lldhcMk4gdgabQYeZ2633m5",
	"5oeNofHdYI2UvQKWg99H3MudCPwmz+8hucvnL0wA3cUX5wmF5V3Qo2GxbegEofHK+13VyYh6POm9g42j",
	"cSQEOZhhVZe8BtDXRs6vXhb9xt3MkQ85d33GvlRsPPg907WYLhYpix/PhPlEmvsVpLHHdENkGzrKTE1I",
	"m60H3XgeIguPiYjWWMxpXffd9zR8mh/RZaNuoavmV+QOY5yw79GdlPkobG3Z2yHAxt5qx3tB1Tvcrwur",
	"tsbzYTAd/czgCaFthJal0s6ot8Jafcy9Wm974bFXnW0AhvWXMub0WWDYKzB3EPy8n4Y8wa4Nu6WvtFpf",
	"bNkyPAeJPjudebI1irY5fS6hV1aUOwhk3c93nrDVxhbxFBHrw8IUZzoIWc0qZN8QWLZw2kG46nxx9QSr",
	"NqweYXuWu4uo1UdXVW7bC1RV4bUgjWiRZJ6CHg9KVa24g8DU++rtCU5tOOXeol316RHtKMtt+E2WC1XV",
	"s/ghIaWvSTOwNeem4KWqPnYQXnofH/7dPPrd7f4/AAD//09o1dMEiwAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
