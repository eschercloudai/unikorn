// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
