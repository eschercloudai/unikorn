// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
