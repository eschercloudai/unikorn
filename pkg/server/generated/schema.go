// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
