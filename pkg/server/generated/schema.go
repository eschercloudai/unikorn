// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
