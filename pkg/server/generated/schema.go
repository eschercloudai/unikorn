// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"SJ+QAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
