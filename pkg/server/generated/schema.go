// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
