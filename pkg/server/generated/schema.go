// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xdW3PbOJb+KyjuVu1ulXzpdOZh/KY43RlPzySu2J5sbTvlgsgjCSMS4ACgHXXK/30L",
	"F94BEpTlONOtp+7IuBwA37ni4PBrFLMsZxSoFNHZ1yjHHGcgget/4TxPSYwlYfScQwJUEpxelk1UiwRE",
	"zEmuWkRn0YccqJA43qBGTxRXXRHFGRxHs4io1jmW62gWqd+iM/dc0Szi8K+CcEiiM8kLmEUiXkOG1dz/",
	"yWEZnUX/cVIv4cT8VZwIyQld1aQ+Ps6iOC2EBP4eZzCwhus1oBtKNoxTZHsMkd0YdL/EMio5Sy9TTGEK",
	"xaYbylW/Qbo74++R+EczFAj5hiUE/Ej6aFqpvytygMpO05N/CrXCr4GkOCf5oLdJGLomwrXmhuPe/qgz",
	"4oAlnDd2ct8rap6SawXuYw8i+5diAZyCBHFuILxv2jfdCYYWUFNTMd3IKiTbAL2KWb73Ta9HHgFNIdcK",
	"KBY3ImY5oStE6JLxTP/mIFwzh8gZFZYx4hhyCclH+2Ofvc/VcakJLFOhsstx9DhrLvNNQZMUmgPtm6vM",
	"DE5emqOUCInYssVLC9NBU7rAiT2pvZPI1FG8+olz5gSZnRYtWLJFS0xSSJDpiu5xShJ7VkbqLlMSS/9p",
	"fATBCh6DYjnVUqAHItcIUybXwMtBGgJhz0sdkwhztyroESaelbIRiDhJNChZMr4gSQL0pUDygAVKgBJI",
	"0GKreZxx8lsNEUIlcIrTK+D3wPVw35rUOUUFhS85xBISBKoZYnFccA7JDOUpYAGIQ8641CT3JLGStgrq",
	"ZBVAOoslyCMhOeAsOvs6BDmHFDfTFLzewE1f8ex5+4I0zxDVbjrF8xMayDd9ig3zUCZ/ZgUdUCY3FC9S",
	"QJKhJaEJwohbeWb6F2m60yLlNldGJVv8E2LpWsNbSEEC+juoadhmSL4aNiQCsY2RrZRpya0pZKX2nbsN",
	"yn0z4uB0Ht4cMyvbC3mTsnhzJRnHK5jfY5LiBUmJ3P4few4hXS+oO9Uw8hpranREv7FSblcDn7MsL+Tv",
	"Yik/fTGi/j3IB8Y3z7iE7kyhKwDbD1Hbsb2An1N8z/gz0m0nCCV3aZq3ibzI8Oo54WHGDyWR6NZIrrFE",
	"mCszL8uxJEpoamEk10Qoe0UqI7+9kF9ge4nJc253OUPoYjawRbnq0Cb0kjMlp5+R0HKGUEJz217Taf+x",
	"d+rsuMPGgG2kCdGO4N7J0KM6iWj7k8oQFUUcgxDLwiiNgpb2aNth/CZGZ5s640Yd61iVHaEzvXEW+xp+",
	"br3Cjq+ovfycsxy4tEEjoMmH5d/I0jHIpzVQJNdQjkUEApocseVRSpY65mWc8OgsSrCEI0l0iMvaKSZm",
	"pS0eHQ1zRdRKw6gKovX65hzuCTw4iVPOYIc+osClezRGWzCWAqZquHvggpgD61Njh7FtHOQ8NiMNv5p1",
	"1WN+nnVNNEfkYF5IdpOvOE58Gy5yiMlSuUag7Uih/COGCtPJ6/x3zzXBW/Fh+QlgMxp7qEl6W3dSix1f",
	"jnBBbzBIMYuIhExMDohENT2Yc7ztkNOPRU4PnJuYHWK5h1XcOJ4PR+EDIOQEjvNQepOrv6mtVlzwALBB",
	"mCZI8SF6IDRhD1bJ5sAzIpFajJEDyjlZgPpdsTAkiND+epecJHg7KmpJBp/0ZIrujNHJfQSWBZ/eq5g+",
	"k1wXXEzvVcD0Tg+Q0MndXDzXCkY5uM0TiuoeplNpTObAMXk2acBm30E1of5Sorz2pR3aQkgsCxEeESgD",
	"jVemn0fA93fi88g5DYpFX2AuUDK2g5N9obhmheP+ak6R+kO5iwneKl15c32u5s3wF5IVWXT26sdZlBFq",
	"/nFajU2ohBVwZ8DGFf7wB6rKMHv73qGLVDI5pjO/vHDC87sDeZebgyz9v+N4TShcMpbq8C0ogQli8i79",
	"XHb0ctt55zK2b8sZH3jy1NbpbrlIkwepNPg+eH0WKYJShhO1r9M381Ord7DoaK6/3s4OMLq0ueSNkwd6",
	"B9pgwvnlBRIgJaErF9elKXuA5JLDknxxCbArMEZdknAQQpnZuqGyJHRffWUm9L+VhGlP3JJuPcl0cXn/",
	"Gp1fvP3YGd2JwIzQCzPSD33hJwq9P/NUh2wkudf37v7VUEaPhMQ0wTxB/3v8p9M/o6v5e7OoJCnXonYu",
	"Vlu1VGcJw4upRplK/aPzUAvJRIxT1d2hUxwytkQOyhlLte9g+3evCboIsFrgI2jICrcqto0QLbIFaHXC",
	"bfsKCI11NxSHVSsjo5tGU0fv8F53qllvaUH89HNDzHb3XRj4GFcBpxosymG3XdCSGc+0uuvosdvQuf5k",
	"LhBUmyPbyO3OErpS7OIfgSLbpLQ2UkNMdygn9t7Xsr67/k0fd1aUDYiYhArNjfpSb9BEevv+yhh9pq06",
	"/EIM8l3VxfawgsTJg12hQVkCRu71B7Z7YAWSIiTn7J4ohx+pfsJ6Tv3ABUt2GTNniXdItTQS70Sq7eoZ",
	"uqu76v3oTtpc16x7oJ9dIPrQ1PbTDcVG+HLQZHQEAi7eBjvrF2+dG+4c9gpiDjJ4aKGbO4eP3bc4DqvM",
	"NOzfpWg50/IjZjoC0NYBCSxxkbppgPaliGvP/Dchvn0TYv0LbN87Lcx6tKurv6BfYKuAStRPaapEqPpP",
	"ZuxdN/fes7TIAjbtH7rd/veswyw+6A2jx3/43gW6zipIjzUNVb8N4TUhRnXXNEet0Vdx2OgxfmqbM93T",
	"dEIkxQswFj1OEmJU9GVbFXX1ue6L7nFauIccIspMpy2UPE+3yKqGSog1BqyPyWJ8Vx/Q7b616ZoQgqzp",
	"mQwp534quxqyXG4rlT5mqYYHQIYBPuYhONJBAmI1zmSQXel12SBeP3XY6K8uUIw33OfVEoPXxBdc09Hi",
	"ZmRNX4qZWHgSfsmTQAoBE+FOGq3JBEth0lx7jRT2B9FJXlTaPQ0Yzs1Rra2vZnTxV/NWsEfRO6DASWxT",
	"0DIQAq8c8V1w954jhVWwva2Ygy85pup/mLnf+8v19aVtEbNEDw60yNRaCNXZm3c2LzZq34/exSkBqn41",
	"zv+dSerTrUSR54xLUH3NLeqdXvisGlPo9F9jYgK/MyuYRRKynHHMSbq9K6iV+DpyQpm8W7KCqgkykGuW",
	"3KmfbOiiM2sGCcFmys8uw0fNdtfarJ4FAXzBBJR7jsxfF2rj1K7pEcbRUC6rP6ETCsPJUK6Aw3gqVBcr",
	"JHmqZbyPqzB18DuY0jOTHkIEYjTdKm9HKGY1Tbv61nMmJCkfaQyfwah10t5+l3EScoWohE7fTn3iDeJA",
	"6taAwhtO3ArUeP4NdGg+X37WyGZ3fZEwlE/3ZajPi/EME3ZqgQDspawFnZwjYW3qwXXPYujcTH7ayHGZ",
	"rDSHfZL7tHAdAzy/vBHuoOIqoPe7yxsxQ2SJKJM6bifXwEHnndG2A9EY2IUdNWxByb8KsKvxQSaDjPGt",
	"h80zVlB9XqYVIhS9I2/cVPilhSVgKthmZr8rEgfBV+YdBmGuyjqcijSLniGA6eRCF76Sbk6hx/4F12nq",
	"JIkyw0n33s3wHYGKGdmHFJboVJ9w8lIsJCq77cNiNkN7VbRNbnKgQJ9KmSyFMpA4wRL3T6D2bNwENELJ",
	"AjJMJYkHUrBmEb0nCcFvObn3vdM0LVCim4SnczUI7czSZ5MhDrOIa5xuYxsHOc5m0QYx3MQc2qlsaXhu",
	"iCttnuyI3C+zY6eYQmWfvVlAVUpv0M42Enqn7lq5J0P71gzkhN3o2dCM40KFiE0wbSYeqvMHtMgdC88O",
	"q5hZpAE4NsiIdOHe28D3lf52BIMbKtKb0NnYx2AJwOsbw3Lc5jpbOzcIOJuaPcIbVRp071yHvNK5Wo/2",
	"Sxu/l0GKxpBBiupdyhY4TbeltrL9pxnD3cBLOYiSQ8QoMO3qV8lHLMNkf15alQcfxN11FvxU5i4PdYi5",
	"LZMNn7sJ8Dvi6jvfabi9a/KbY4i3RGyQ+tOA5dk5Bz2Q6whyL8z7qf7dxe4hVa9HT7dMgistHgsSl3Gw",
	"6krRfU1cJ2a6wmp1kq1Rwg8c5wIRanNGKHyRJs1uicrNdGbfj22BzuczEUsuwxp3z0/3nOnJXMdoHkv0",
	"19h+jKBbIQ7CXot1FpJhknoMYQH8vwTSLYbv5cPpGBceZrCZJcy7bFOCoDfnJRbigfHEVX/AwbkNRnDf",
	"OC1xKsBf5aCUmLa8wdRYxqDU7gvVUXO2XI6zoYC44ERurxTkDHVrKfM3irHaR+Ukmdd1FggHYWLPhivb",
	"e62WomGtE1VUg3ptasI6cL7DrB9Un1doAZjr9BIF7f70y5Q9lDee9Qv1c2bSQFs/3vDU0iXOThpi6xjU",
	"GnicsiI5jll2gnNycv+DeaAkTnKLs9tIr5blHTxF15o0IgzydEYaNrrkqnn0FZ53pEP/5zZqiVW9tyY1",
	"iNAlczwj/unqelmkNrFQp4noy/UqwbkQkmXVxYnQ1+w3OhdQEplCIwXEPPRv2F1n0enxq+PTUrnqnODo",
	"x+PT4x8Vb2C51vtUrqL/LuUkHktPLq3r/iuVKltGUbpyBaj/RoQUaKWNJ9czF5NjUF4UInRtIta3tBDm",
	"DMuoNUbxmql9Y8vSTDWdq9QdKw6qpxsXib4TkvOc/OOHeW/d5RVjpwLKq9NTn+qo2p34y5w8zqLXISM4",
	"yo/orj+Md3U+u3ucRX8KmXeoXkRTZkVnv371CI1fPz9+Vk2HIDX4EsNdJuj50NV+PfBNMdZOVT4A7WlA",
	"K+S6qw4GDJIFVsfbNUsakMqZkINGlBLEK0yokLVPYlKgOMiCU4EwEmRF1TQ0QUBjvs0lJMis55b+9dN1",
	"iTejOddY9YlTTDJjCytwqhm0Jdwu5lRpTGvI3dLGQDGmaKEtRoNglqbI3u46XDhNXvkuUinGW9o0pPQY",
	"1lZsQ/uSCYvtQq61hhXl/u6E5/Yb5t8Vhr2mnYLxLPpyRNnRgiXbuvKWC9cey94YN3tH9NXLI3qkjTLo",
	"2lCdIWH8xr9+ulZ/XXFMJSS3VP12WxqEt5FpPjNcoXzYjHH9QKF80mkSMYyvOYr6a+sk1aUEt378NKoN",
	"nvQLwz0eGGcH4W+1eO55NOi2KQINCJymnreGJZohacXoIDXFrmynSpr6bYPzFvm7IMBdLu0FkfD69PV4",
	"514NqG8Jodo9f/z86JOOuqChkouIwoOncunA2SPv0VdSpH/2E2WIv7JnX5a8CjAqu0UeXxREfw6CfrsO",
	"4ouByCeQTr52K9g+GqSlIF2hZf27wpwbb0vOsiDQWZuQaB2MRYwTnaxYhXF0uj5JU5s5qiVdLdKaCbpt",
	"7BoC++g9d9XpnSrJWnXdDgIsXIDtReW9A7kH4IUpur3AxVnA9ACbCXqvUUX9V/f8dZMTf6lv5cbkhQNS",
	"N3mCh8TZNEkmtzmJzVWr9W51esgWCbaUD5hDHZvJMMUrUxpVruGWFjQBnm7tE15JaMEKnTVP7oFvW0ke",
	"HV1dhKL3oLr/TflgguouQ+JiPCYe5GG0HQw79iBX9ErU7CBsq1c7uwjdgXKzB8i9kOgdcF+63kv5bmx3",
	"iLm9l0GM7SQavYX/D67N9y8fT742PjgS4PE0LQQL0abFiUPBGeqelPA873wW5eCxvKzHEqo834Ecgcyz",
	"a8+nQsdfX/6AoxfQo7Pxzq7vMo24Pg6QhuOz9nw6/k7r0zPaZITj1THq5+sKxPgtLYsX/feDebZTSJZh",
	"SWJU/oEI/bIHsjxlW0j+x1z81PNhur2llZNV7g5I5UGZLs1VldQZ3wvVrtct7fteT3W9fNx4MDn+aC5Z",
	"2+TQ4tVU69qDr+ZWN80KTnqm/WmU+ssn+9Etji+pHND476RlGhzRShkfvkaQjU/ulZflWAgWEyyt0NZt",
	"GpkDkNhs41vaS5GsU6TCbxWM0LfXCu0rVNU66KahfDawixQ+WOh7tdCrlIug24R9488rX70ICdi77ncc",
	"DiB5npvzZwFAFY16iow4BId2hcBg+ppOjk2UUqsedzXzVo/quiQmYz8AS6MfIKhz/Dtv+fywMTR+GKwa",
	"s1Mcc/BjsjslewV+VuyPkAXm8xcmgO7kq/OEwhI06N6w2DZ0gtA4936EejKiNge992TjaBwJQQ5mWB0q",
	"rwH0rZHz3cui16c/jnfuf8j19++gjnwvv+tt9uVp4/H0ka5rdbJIWbw5Eub7kO6HlsaS0w2Rbego2TUh",
	"M7ce9N7zqFt4jEu0xuKW1tX2fc/sp3kgXQbsFg1rfkLzaSwX9jHOgxkwCltbQngIsLG3cvROUPUO931h",
	"1dbLfhpMR7+xekBoG6Fl2bkj6q1WVx9zr27eTnjsVbobgGH9fZJb+iww7BXrexL8vN/FPcCuDbulr0xd",
	"X2zZkkZPEn12OvMqbBRtt/S5hF5Zne9JIOt+u/iArTa2iKcgWx8WptDVk5DVrOj2gsCyReiehKvO56YP",
	"sGrDagPbo9xdkK4+uqoK3k6gqorYBWlEiyTz2nR/UKrq7j0JTL1Pfh/g1IZT7i2AVp8e0Y6y3IbfgblQ",
	"Vb28HxJS+oI1A1u/bwpeqkpuT8JL78vrf5h3xY+P/x8AAP//EPXnXWuQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
