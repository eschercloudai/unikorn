// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
