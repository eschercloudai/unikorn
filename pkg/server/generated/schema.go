// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
