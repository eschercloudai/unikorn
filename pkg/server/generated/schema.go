// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
