// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"vPQ+Cvxv8+h3t/v/AAAA///RRKVgnIoAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
