// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
