// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd63MbN5L/V1BzV3V3VdQjTvbD6psiJ15tdi2VJa2vLnSpwJmmiOUMMAtgRDEu/e9X",
	"eM0TmAdF2c6GnxJTQKMB/NAvNHo+RzHLckaBShGdfY5yzHEGErj+F87zlMRYEkYvOCRAJcHptWuiWiQg",
	"Yk5y1SI6i65yoELieI1qPVFcdkUUZ3AczSKiWudYrqJZpH6LzvxjRbOIw78KwiGJziQvYBaJeAUZVmP/",
	"J4dldBb9x0k1hRPzV3EiJCf0oWL1+XkWxWkhJPD3OIOeOdyuAN1RsmacItujj+0a0f0yy6jkLL1OMYUp",
	"HJtuKFf9evlu0d8j88+GFAj5I0sIhJH0wbRSf1fsAJWtpif/FGqGn0ey4h3kSi+TMHxNhGt1Go4766P2",
	"iAOWcFFbyX3PqL5Lvhn4t30U278UC+AUJIgLA+F9875uD9A3gYqb8tANzEKyNdBhnp+ONpvN0ZLx7Kjg",
	"KdCYJYrI2EnUR+lBEsOFXL1BujUCmuSMUBlm+yZm+d6xUlEewHohVwrfFu4iZjmhD4hQtUj6Nw/j+kyL",
	"nFFhz3McQy4h+WB/7EqlC4UyNYCVBch1OY6eZ/Vp/ljQJIU6oX0LAzOCd+POUUqERGzZEAEL00FzusCJ",
	"3am9s2hQ8xPnzHs27LBowZItWmKSQoJMV/SIU5LYvTLKYpmSWIZ34wMIVvAYlKRQLQXaELlCmDK5Au6I",
	"1OTYnqc6JMjO/Rqsw5h4Vc4GIOJl0aBkyfiCJImSFV8HJBssUAKUQIIWW33GGSe/VRAhVAKnOL0B/ghc",
	"k/vSrJ5TVFB4yiGWkCBQzRCL44JzSGYoTwELQBxyxqVmuaNAlJJQUCcPI1hnsQR5JCQHnEVnn/sg51E+",
	"ZpiCVwu47urLPS/fKIXZx7WfT/H6jI48N12OzeGhTP7MCtqjTO4oXqSAJENLQhOEEbfyzPQv0nSnScpt",
	"rmxhtvgnxNI3h7eQggT0d1DDsHWffDXHkAjE1ka2UqYlt+aQOe177reD930Qe4cLnM0ha7g5kR9TFq9v",
	"JOP4Ac4fMUnxgqREbv+PvYaQribUHqofebU51Tqi35iT2yXhC5blhfy3mMpPT0bUvwe5YXz9ilNojzR2",
	"BmD7IWo7Nifwc4ofGX9Fvu0AY9ldmuZNJi8z/PCa8DD0x7JIdGskV1gizJWZl+VYEiU0tTCSKyKUvSKV",
	"kd+cyC+wvcbkNZfbjTB2MmvYolx1aDJ6zZmS06/IqBthLKO5ba/5tP/YO3eWbr8xYBtpRqzPumc2NFUv",
	"E01/UhmioohjEGJZGKVRUGePNh3GL2J0NrkzbtSxDrFZCq3hjbPY1fDn1its+Yo6OJFzlgOXNtYFNLla",
	"/o0sPUQ+roAiuQJHiwgENDliy6OULHWozjjh0VmUYAlHkujInLVTTKhNWzw6iOcLBDrDqIz9dfrmHB4J",
	"bLzMKWewxR9R4NI9atQWjKWAqSL3CFwQs2FdbiwZ28bDznM90vCrmVdF89OsbaJ5IgfnhWR3+QPHSWjB",
	"RQ4xWSrXCLQdKZR/xFBhOgWd//a+JngrrpYfAdaDsYeKpbdVJzXZ4ekIH/R6gxSziEjIxOSASFTxgznH",
	"2xY73RDq9Hi/CTUilgeOih/H5/2XByMg5AWOd1M6g6u/qaVWp2ADsEaYJkidQ7QhNGEbq2Rz4BmRSE3G",
	"yAHlnCxA/a6OMCSI0O58l5wkeDsoakkGH/Vgiu+M0cl9BJYFn96rmD6SXBVcTO9VwPROG0jo5G6+M9cI",
	"RnlOWyAU1d5Mr9KYfAKH5NkkgvW+vWpC/cWhvPKlPdpCSCwLMT4i4AKNN6ZfQMB3V+LTwD71isVQYG6k",
	"ZGwGJ7tCccUKz7XbOUXqD24VE7xVuvLu9kKNm+EnkhVZdPbm+1mUEWr+cVrSJlTCA3BvwMYX/ggHqlyY",
	"vXld0kYqmRzTOb++9MLzmwN5+zSPsvT/juMVoXDNWKrDt6AEJojJq/Sz6xg8bRetO+SuLWd84MlDW6e7",
	"4SJNJlJq8H2c9VmkGEoZTtS6Tl/Mj43eo0VHff7VcraA0ebNJ2+8Z6CzobVDeH59iQRISeiD79SlKdtA",
	"cs1hSZ58AuwGjFGXJByEUGa2bqgsCd1XX5kJ/W8lYZoDN6RbRzJdXj/+gC4u335oUfciMCP00lD6riv8",
	"RKHX5zzVIRtJHnW6QHg2lNEjITFNME/Q/x7/6fTP6Ob8vZlUkri5qJWL1VIt1V5C/2RKKlO5f/ZuaiGZ",
	"iHGqunt0ikfGOuSgnLFU+w62f/uaoI0AqwU+gIas8Kti2wjRIluAVifcti+BUJt3TXFYtTJA3TSaSr11",
	"9tpDzTpTG3Wefq6J2fa6CwMf4yrgVINFOey2C1oy45mWdx2d49a3rz+ZCwTV5sg28ruzhD6o4xKmQJFt",
	"4qyN1DDTJuXF3vtK1rfnv+7izoqyHhGTUKFPo77U6zWR3r6/MUafaas2vxC9567sYntYQeI9g22hQVkC",
	"Ru51Cds1sAJJMZJz9kiUw49UP2E9p27ggiW70MxZEiSppkbinVi1XQOk27qrWo/2oPV5zdob+skHoqu6",
	"tp9uKNbCl70moycQcPl2tLN++da74F6yNxBzkKNJC93cSz723+J4rDLTsHuXouVMw4+Y6QhAUwcksMRF",
	"6ucBmpcivjUL34SE1k2I1S+wfe+1MCtqNzd/Qb/AVgGVqJ/SVIlQ9Z/M2Lv+0/vI0iIbsWj/0O32v2at",
	"wxKCXj96wpsfnKBvr0bpsbqhGrYhgibEoO6a5qjV+qoTNriNH5vmTHs3vRBJ8QKMRY+ThBgVfd1URW19",
	"rvuiR5wWfpJ9TJnhtIWS5+kWWdVQCrEawWqbLMZ39QH97luTrwkhyIqfyZDyrqeyqyHL5bZU6UOW6vgA",
	"SD/AhzwETzrIiFiNNxlkV359NkjQT+03+ssLFOMNd8+qw+AtCQXXdLS4HlnTl2ImFp6Mv+RJIIURA+FW",
	"9q/JBEth0lh7jRR2iegkLyrtmo4g5z9RjaUvR/Sdr/qtYIejd0CBk9imoGUgBH7wxHfB3/scKayC7W3F",
	"HDzlmKr/YeZ+7y+3t9e2RcwSTRxokam5EKqzN+9tXmzUvB+9j1MCVP1qnP97k9SnW4kizxmXoPqaW9R7",
	"PfFZSVPo9F9jYgK/NzOYRRKynHHMSbq9L6iV+Gm9Yzmq++GBYypbo+rf3JCUyfslK6hiLQO5Ysm9+skG",
	"PVo9M0gINj0/+Uwmxed9Y5k7tgfwBRPgdguZvy7Ukqv11hSGceQWpDugF0T9aVS+UMVwElUbZSR5qU29",
	"j0s0BZkdjPCZSSwhAjGabpWfJNQxN03bmjqwJyRxr1L692DQrmkuv8+sGXP5qMRV18J94d1jT9JXj6rs",
	"T/kaqSvDC+jRmaHMroHFbnsx41A+3QuiIf8nQGbcro0EYCfZbdTOeVLdpm5cey/69s1ktg1sl8ln81g2",
	"eUh/V9HDi+s74Q9HPozo/e76TswQWSLKpI74yRVw0BlrtOl61Aj7sKPIFpT8qwA7mxBkMsgY3waOecYK",
	"qvfLtEKEonfkRz8XYWlhGZgKtplZ75LFXvC5jMVRmCvzFacizaKnD2A6LdGHr6SdjRiwnMG3mzq9wuVG",
	"6d67mcwDUDGUQ0hhiU4SGs9eioVErts+bG1DOqiibVqUBwV6V1yaFcpA4gRL3N2ByifyM1ALQgvIMJUk",
	"7knemkX0kSQEv+XkMfQw1bRAiW4yPhGsxmhrlO4x6TthFnG13a0tY++Js/m3ow7cxOzbqcfSnLm+U2kz",
	"bAfkvsurnWIKuT57s4DKZOBRK1tLBZ66am5N+tatHgIadxdogzqeqxgi1qN5M5FUnXmgRe5QYLdfxcwi",
	"DcAhIgPShQfvEd+X+tsTRq6pyGAqaG0dR0sAXt01Orr1eTZWrhdwNql74GyUCdSdfe3zSs/VfLRfWvvd",
	"hTdqJEcpqncpW+A03TptZftPM4bbIRtHRMkhYhSYDhKUaUssw2R/XlqZQT/qdFf581MPt9vUvsNtD1n/",
	"vpurAU9EfufbEL93TX7zkHhLxBqpP/VYnq190IR8W5AHYd59JNCe7B6S/Dr8tOtC+BLqsSCxi6CVl5H+",
	"C+YqpdMXkKvSc40S3nCcC0SozTah8CRNgt4SucX05u0PLYHOBDSxTi7HNW7vn+4504P5ttE8s+hK8XqB",
	"AQ7CXqS1MGsihgESSjKwHCvJUuYVrcFv10GGSRowpQXw/xJIt+jNCYCnnHAQ94T2BK8JRQJiRhOhN8rM",
	"b0PS1BjXy0ZQr6ZqdEMTUOwQ/4tGQXOWiJQJ2iZGBWUqUhXw10HTYVFYG3vWXPPGpIO72yon0eE/WEyC",
	"UbhaRme/fm7tey0uq2Fs4syNN+D3MUsg+tSeiv51Fpno772W8RwSwiGW9wUn+lI1gftH4Mp45tGn59m4",
	"wXMsxIbxpDukwo+1zmuNPnV8xZIlT0al+pNVi7RITSzbFq3xpAT43oWc1xenDNGPIlatRogz1Qq5VqPo",
	"NhexlVfnouhIt0KqlT8/xi1nuPoD21BdWcU0HMVaAw+hGbtG6O7D5SiqJQqGeHUNR1BtAa22psGjaMql",
	"dHi4tgvkq5XisRVqqtd/O77EqYBwRRZno9lSLFOjp712YteMG3Sg3XS8DQXEBSdye6OUnOFuJWX+o1Ll",
	"zbd2XpZ5VRNGyUlzT2bsgOZaq6loRaqT6lSDam5qwOqSb4dRr861hF0A5joVTgna7vDLlG1cdkYlLC6s",
	"PGn8eMdTy5c4O6kZSseg5sDjlBXJccyyE5yTk8fvzGNKceIO4jzSs2V5C0/RrdNd+o9aZWFjvd7Ut77E",
	"84586P/Mo7YQ+RY4qpmWerdNYiWhS+YRHT/d3C6L1KZl6yQ7nZpUPg8phGRZqfCFTlK60wJLEqnkSplA",
	"Z8qk1HzPs+j0+M3xqXMw9IuK6Pvj0+PvtSKTK71ObhbdV30n8dDjDhdh6L7xK3MNFacPvku6vxEhBXrQ",
	"DqTvkaDJ0HJpFgjdmlu7OS2E2UN3c4dRvGJq3djSueqmc5n4aAVU+fDtMtE36vI8J//47rwzb5eg0aof",
	"9eb0NGQ+l+1OwkWinmfRD2MoeIo36a7fDXf1Plp+nkV/GjNuX7WduhTVxpxfjP366VnbTn2Q6n3H5q8N",
	"93roar69+qIYaz70OADtZUAr5Mq+qj9pKDmPajV6tNHKWql1v8ULqmu12Yl5i123sZRMbhLEAuX2Wbod",
	"0D7otqp6TjXUcswliYsUc0SyPIUMqDQECqGGQXNtvs8jbUEjt4YmVfX6l4ufeiBXyNVVuXjVgrSw9v3p",
	"G190ojSOrcNZPUe/+3Dp6rC15mw8kpehby8Aejqi7Mih6MhaUJkpF+sqA/qQY/R4EDLaRYKneIXpAzTA",
	"kjMxhJbmMullNb6yozeEmM5GXzPR3ulbM4F6LdNteDlr5U4bNSOjZ7886kSwTCjm9y5upqOFJPFJjNN0",
	"4X3PcHX59qI8qWa3XeNhCXNJJVAdUNd3t4XQ+Xl6c2doAwjHstB/ljhdO0NWDXiZXM+QYGiFHxW65hSE",
	"MGlP6RYlzNBAhJr/carO8WMeVYkWxNUxn1ONyHIIJfdK6SCQnpWVEQvONgJ4KR1sTMgFKnrEFEniC7ee",
	"E+VTHwMB8fR1UFN3EjzBRS0MFliZHW0Hvmbq+AVNTTsqafOACRWy8m+MtuAgC06VThHkgaphaIKAxnyb",
	"S0jsZs3pXz/eOnAYAbXCqk+cYpKZOLUymtQIRlQ1SrRWi21kg9JyA22UW1aPJUCiYaxo//Xjrfqr1s2Q",
	"GCDOnVs3j0zzmYGuOiYZ4/qRpouamjCniZr3iE4jNG9tMHQ3ydkojvu8iznXLID0BzThrC2eBwon+D2D",
	"kW4ATtNAvQWHZkgat42QmoKfttOc1q6h/HLsosH+Lgjwl4z9ikj44fSH4c6dOphfEkJV2O/503NIOuqi",
	"ztqYprAJFJ3v2XsU3PpSinT3fqIMCRdl78qSNyNcw3ah668Koj+Pgn6zFvRXA1FIIJ18bn984NkgLQXp",
	"uyTXvyvM+fG25CwbBTrrJxKtg7GIcaINwjI8rJ8skjS1r2e0pKtEWv2RUhO7hsEuei98n1iYKskatW0P",
	"Amy8ANuLynsHcg/AG6fo9gIXbxH3A2wm6L3aB3B+9Y9fNTkJf6VF32gXHkjd5QnuE2fTJJnc5iQ2SWM2",
	"yqoTXbdIsKXcYA5VhDXDFD+Y8vByBXNa0AR4urVlTCShBSv0y0HyCHzbSFdt6epiLHoPqvt3eg4mqG53",
	"sSWGb7ZGeRhNB8PS7j0VnTJ9Owjb8uXyLkK3p+T+AXJfSfT2uC9t78W9nd8dYn7vpRdjO4nG4DebDq7N",
	"ty8fTz7XvhU3wuOpWwgWonWLE48F51j3xMHzovVFu4PH8nU9lrHK8x3IAci8uvZ8KXTC39g54Ogr6NHZ",
	"cGffJzUHXB8PSMfjs/J8Wv5O46uB2mSE44dj1H15JBDjc+oKOP73xjxALiTLsCQxcn8gQr9RhixP2RaS",
	"/zEXP9V4mG7ntHSy3OqAVB6U6VKflePO+F6ocr3mtOt7vdT1Cp3Gg8nxR3PJmiaHFq+mYukefDW/uqlX",
	"sdQj7U+jVF9/249u8XxN7oDG35OWqZ2IxuO3/msEWftasrssx0KwmGBphbZ5PVRLBEjsq6c57SQ6V4mO",
	"428VjNC31wrNK1TVetRNg3sAuYsUPljoe7XQy5SLUbcJ+8ZfUL4GETJi7drfsjqA5HVuzl8FAGU06iUy",
	"4hAc2hUCNp9toQ3tdvpabvJYee0pez37/KiqsGbe3YzA0uBHmKqXOq2qBGHYGB6veuvf7RTHxP7vn74g",
	"2Wvkp1X/CFlgIX9hAuhOPnt3aFyCBt0bFpuGzig0+ms07oSo9UHvvdg4GkbCKAdzXEXNoAH0pZHzzcui",
	"H06/H+7c/Zj9v7+D6hV7YW+zK09rZWCOdIXOk0XK4vWRMN/I9j/gNpacbohsQ0/x0QmZuRXRx0B5GhEw",
	"LtEKizmtvjgUKhg0zQNpH8B2+dP6Z8RfduTGfZD8YAYMwtZ+RqEPsHHw6xk7QTVI7tvCqv1myMtgOvid",
	"+QNCmwh1BXSPaLDubrXNnQrAO+GxU7O3B4ZVlaE5fRUYdsoOvwh+bWoH2AVgtwwV3O2KLVuc8UWizw5n",
	"XoUNom1OX0vouTrDLwKZJXLAVgBbJFBatgsLU7LzRciq16b9isCy5XRfhCtD4wCrAKzWsD3K/aV1q60r",
	"6/nuBKqyHO8ojWiRZF6b7g9KZQXhF4HJUTnAKQCnPFjKtdo9oh1luR1/B+ZDlRupV0jpC9YMbCXiKXgp",
	"a9K+CC+Oyh/vXfHz8/8HAAD//05y+4UmmgAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
