// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
