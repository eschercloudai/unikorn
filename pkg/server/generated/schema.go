// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
