// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//yhIW8qOkAAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
