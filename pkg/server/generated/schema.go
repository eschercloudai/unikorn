// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
