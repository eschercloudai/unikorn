// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AAD//931gpW4igAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
