// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
