// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"RPbqT+5O7exzy5F6f///AQAA//89ctWDsqYAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
