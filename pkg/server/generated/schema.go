// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"g24wrMxOAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
