// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xd63MbN5L/V1BzV3V3VZTkONkPq2+KnHgV71oqS1pvXeRSgYOmiGgGmAUwohmX/vcr",
	"vOYJzIOi4uSiT7ZIPBqNH/qFRvNLkvK84AyYksnxl6TAAuegQJi/0qyUCsR7nMOF/0J/TkCmghaKcpYc",
	"J1drQNeM3nPBkOuBGM7hMFkkVDcosFoni0R/lhw3B00WiYB/l1QASY6VKGGRyHQNOdaT/KeAVXKc/MdR",
	"TeGR/VYeSSUou6tpenxcJClnSvDsIsMM5lBsu6FC9xukuzP+Hol/tEOBVN9zQsHyXgBWcNqY9INtYr7k",
	"TAEz/8VFkdEU65Ud/SL18r5MpKO5IEtEm0thDtUIOexxQO+CIftduQTBQIE8tbu9b9rvuxMMLaCmpsLn",
	"yCoUvwc2TvPng81mc7DiIj8oRQYs5UQPMnURzVnODdEytAyOS7V+jUxrBIwUnDIVJ/sy5cXesVKPHKLw",
	"vAAmFU7vkSYVmHKTIJnygrI7RJlmkvksQLiBvyw4kxb6OE2hUEA+uA/7B/hUo0xP4I4N8l0Ok8dFc5nf",
	"l4xk0BxoL+zozRDcuBOUUakQX6FGe7S0HQylS0zcTu2dRIuaH4TgwbPhpkVLTrZohWkGBNmu6AFnlLi9",
	"snJ1ldFUxXfjA0heihS0pNAtJdpQtUaYcbUG4QdpyLE9L3VMkJ2EhX2PMPmslI1AJEiiRQllCgTD2SWI",
	"BxBmS39ruJwwVDL4XECqgCDQzRBP01IIIAtUZIAlIAEFF8qQ/Mvmfv/c1K0/wvIdbC9Bhbn50+X5e7SB",
	"JbqHLZJgiekpC60QNKzp3QQaeapAHUglAOfJ8ZcheAUUjZ2mFPV5uu/rxj3zaZJyHKI6TKd8fkInnpE+",
	"xfagMK5+5CUbUBzXDC8zQIqjFWUEYSSc7LL9yyyL930DGShA/wDdlHuV933G0/tLxQW+g5MHTDO8pBlV",
	"2//lzyFQqml7Uw1zrqGhGx3Rr9zLmGrgU54Xpfp/sZQfPlu5+R7Uhov7Z1xCd6apKwDXDzHXsb2AHzP8",
	"wMUz0u0mmEruyjZvE3mW47vnhIcdfyqJ1LRGao0VwkKbJHmBFdWH3hglak2l1q1KG6TthbyD7QWmz8lu",
	"P8PUxWglVugObUIvBP8FUvWMhPoZphJauPaGTvfH3qlz4w4rM9fIEOL8qz2TYUYNEtH2fTZYIlmmKUi5",
	"KjNDUMm0lcUF/bXt3PwmFlybOmvyH5rIiRuhM711bPpq8MR5MB2/xjjSheAFCOVCGMDI+ervdBUY5OMa",
	"GFJr8GNRqT3bA746yOjKRGCsw5gcJwQrOFDUBFzUtoDkOLERFKOxTWwmFN/xir0K6fT6FgIeKGyCxGnH",
	"pUMf1eAyPRqjLTnPADM93AMISe2G9alxw7g2AXIem17xz3Zd9ZifqvZ8ac9AwMs9KRW/Lu4EJjGGywJS",
	"uqLagjd2kNT+Okel7RR1VLv7SvBWnq8+AtyP+sk1SW/qTnqx48uRIegNOtSLhCrI5WznPanpwULgrSEn",
	"SHnfJsRbqenRUNkA3CPMCNJgRRvKCN84TVSAyKlCmon2sGgLdAn6c41zIIiyPp9XghK8HZVHNIePZjJN",
	"d87Z7D4Sq1LM71XOn0mtSyHn9yphfqcNEDa7WwiYrehCAJKR2EJ3M4OSdTZMxw79rAGbfQdlqf7Go7x2",
	"mAIiVSqsSjnd7fORo0vbLyIF+5z4NLJPg7IjFmmZKD7a0aa+5FjzMnDlcMKQ/sJzkeCtVijXV6d63hx/",
	"pnmZJ8evv10kOWX2j1fV2JQpuNNu/CKpYyD9OZrBj9Zyhpv1ONn7oB14GRzQBl264L+Hrfl3EoMbS+yx",
	"N0RdP9wRcPvjARofSm5fCXQPL50dyzi5OAue2N/due8KuEkewj9wuqYMLjjP9Bgr0DoE5Gwu/eg7RgXQ",
	"aedKsW8DWt959tTOWW+5VrMHqXygfYi/RaIJyjgmmq/zmfmx1XuyNG2uv2ZnBxhd2j5NOYn6DPQ2tHEI",
	"Ty7OtMBQlN2FTl2W8Q2QCwEr+jkk0y/BGoOECJBSm+emoTauTF9zLSTN31roticekJAnDJ1dPHyHTs/e",
	"fOiMHkRgTtmZHembvj6QpeHPSWZCPYo+mNvj+GoYZwdSYUawIOhfh3959Vd0efLeLooQvxbNuVSzaqX3",
	"EoYXU40yl/rH4KaWissUZ7p7QM0GZKxHDio4z4zP4fp3w+NdBDjF+AEMZGXYOnGNECvzJRgNK1z7CgiN",
	"dTd0qdO0I6PbRnNH75y97lSL3tImnacfG2K2y3dp4cPNJzgzYNGOvuuCVtx6tFWMv3fchvb1Bxs4120O",
	"XKOwG6xB+Q/M8F1ID7tRdJuD3DYKj7KiGbigenSUi/PLs38h3RItsQSivSlJpQKmkLR9w4NTdqdPdHyR",
	"DLkm3kbMYnTWO/QGy/WSY0Giw3ZEEPEdDhH6YKEiq3m1G9ngpHMXrddOwqQUgueg1lDGF3ZRNQkNETzs",
	"72vl2gXcff+gO90xINMJk0b8mavMQTP9zftL63jYtpoFpRwUdFUX18NJ7qDQ60ppxglYRdMf2PHAaQBN",
	"SCH4A5XaatT9pPPe+xEmTnYZs+AkOqReGk13ItV1jQzdNRZqfnQnba5r0d3QTyEQnTfNq/mWeSPOPGCj",
	"p+GLq4BBaRv2r4+MiGx5hQtzENvqi8AKl5kK7g6074HO3vRnj1/+oLM34S2X63ewfR80juvRLi//ht7B",
	"Vm851R9lmZb++p/cmurhc/DAszKfwLR/mnb751kHdrFNjBIa4vkkVdq0leNmTNSKGVWf83zFRl/t7Y1u",
	"x8e2RdXdleBWZ3gJ1qnAhFBrJVy0hXPXpDB90QPOyvCQQ0TZ6YyRVBTZFjlhWR3rYOjBYXVXNzTsQbbp",
	"iviRYWfJ0zMbUkF+atMe8kJtKyU3ZixPD0sNA3zMSQlkYkyIoAXzMHalN6SVo67ysN9R3f1YhzygKxwG",
	"r2gs5Gli+M14p7nPs9mtZPr9FIEMJkyEO0m2ei7Tdc5ce43f9gcxyV7GtNZtJgwXPlEt1lczhs5X80Kz",
	"R9FbYCBo6lLRcpDSmfudK8hw7xOksQqutxNz8LnATP+H26vJv11dXbgWKSdmcGBlrtdCmUmSvHXpp0n7",
	"avc2zSgw/amNP9wSYBSIaSXLouBCge5rL4BvzcIX1ZjSZNlaowvErV3BIlGQF1xgQbPtbcmcxM+aHatZ",
	"/Qd3AjPVmdV85qdkXN2ueMk0adox4ORWf+TiLp2eORCKbc9PIdNH03nbYnPPhgCx5BL8biH77VKzXPPb",
	"jDCOI8+Q/oRBEMWyjIKBkoHcoj624uetbyXNUDqzVjEopoczpSbK6TgDA/I6lhA1wuyuJdznNSX7sKRZ",
	"zIaODDNt1yjxj0QGt66XIzZp5wIZYnM3rrsXQ/tmE8JGtsumgQW0ahHTHXXw7PTiWoajcYTK+8hxynnJ",
	"DF+gWEMOAmdIt0aUobffh0e7m0DL24truUB0hRhXJnym1iDApI2xthHdGDiERD1syei/S3C8iQEwh5yL",
	"7dgqbSuzOhpZXlz2OALmQndhd68i0e3HIKJ99uAkIFe5g3Ph6yA5hFqTIhgCLelmBkZMQQhtqsni8HlK",
	"pvduNuAIYuzIMcBwYhJ2ppOXYamQ77YP49EOHb19cylKARSYXfEpTygHhQlWOHA5XBnuYQIacUYJOWaK",
	"pgOJVIuEPVBC8RtBH2Jv/2wLREyT6UlZDUI7s/SPydBBc4hr7G6DjYMnzuXCTjpwMzNh5x5Le+aGTqXL",
	"dh1RJj7HdY595fvszayqEnMncbaRljuXa54nQ3xrxjSm3a+5KEUg2u506iTabIjP3L4YkTsWcexompyy",
	"vwO7U+tmgKEhBTVexoZsy5qREUX03u59peIDsc+GFo2mbDZ43JAOg/R0MCfqmz4/S5MHLR4PQtOlYo+c",
	"oirtuYeAIYfsRK/OuGSNz71n3xhykkp7m/ElzrKt12uu/zxbvBut8INoiUWtqjP+cZVHxXM85Tpjoo1e",
	"5b1PkgN11vtcMeA3dUgMuOM4vO82Kh4IRu8c0A/HheivoQdR2gbXXw2Yqp19MAOFtqCIwryf2t9d7B6y",
	"Dnv0dB/ph9LgsaSpDx5VN1Ph28Y6xzQUi6rzha263ghcSESZy/Vg8FnZjMEV8swMZtuPscCkJtown1DT",
	"Gnf3z/RcmMlC22gfR/QlfPMJuwDp7oI6mLXBssgQWjLwAmvJUmX13AOLXMMVVIC8pWwg5koZkpByRqRh",
	"sqVtQ7PMmtCrViyq5QDGSNQn8+zNKTp7M0Cb+caG0XoD/M0AoL1ARKtkcQESmIIqB6gOc5tQ4bgUbMy9",
	"aLO7xbPoxnZqFfToj1Yq4AzOV8nxz186W96IRhoE2+iqj6SaOPFtygkkn/oXhcTY0ibmeWvEuwBCBaTq",
	"thTUZK8RuH0AoS1skXx6XEybvMBSbrgg/SlLCcKZ8I1Gn3oOZUVSIJVRf+U0IiszG8F1xUN6SDFL7IOs",
	"yZwqMD1psJobMcp0K+RbTRq3zcROQpuPHSPTCulW4TwJz854aQG+YaZsh204ibQWHmIr9o3Q9YezSaNW",
	"KBij1TecMGoHaA2eRo+ircUxYErbQ2iMpb6obWjbaVU/KoOlQ6ofaJjOhg0bvnpe4UzCYmQt3haMrGk4",
	"RDxojfaNxaBDLyEtBVXbS80eO6mVeO23dUEyRF2vxCR6nZ8YUbkELExuk15gu3iKid1kfOOTC+pTf+oE",
	"Q+vDa5Elx8laqUIeHzWMnUPQuynSjJfkMOX5ES7o0cM3dm/lkT9RN0mySAxn2wBJrrwSMl8a3YOtBXrZ",
	"ZGy14TvSYf65SbrS4PdAUcM8NLttM+UoW/GADPjh8mpVZi6x2WRNmQyZ6s1JKRXPK81tE/2ujeRRVGkB",
	"UWVE2WofDf/xOHl1+PrwlXcSzJuE5NvDV4ffGo2k1oZPfhX993RH6djzCB9P6L+uq5LHNKV3oUcgf6dS",
	"SXRnnMDQ8zybKOSzBBC6WlOJqLxhpbR76MwbhFG65ppvfOWdb9u5ymRzuafVa7ozYi6E1UlB//nNSW/d",
	"Pr+gU2Xo9atXMflXtTuKlxJ6XCTfTRkhUOLHdP1mvGvwufDjIvnLlHmHisY0hZmxysJi7OdPj8YIGoLU",
	"4OO4cAWx50NX+0HXb4qx9lOJF6A9DWilWh/9srmX42/NWm5GEDofQJWCaUmLTJBF73lRLjOa6jEk8tgw",
	"Zu8W/fTxyqpjjRxZAkHL7Q0zwfLazYrAolTrnzTVuwCgVTFJM+PzAeMHnnkHznDIbaFGXzatxTDL26OW",
	"VRCwRazh0Wrl7PNRVl7o00Hss/FmMQGtxNoDYokK94LeTejenjvb5oaZs1lgoWhaZlggmheZWZ4doJR6",
	"GnRjHJebxPgOyHPLpphevDv9YXgzziu01Qzp7M23r16HQjKVW+Bc7frl/PWHM1/erLNm64s97bju5cTt",
	"ihwL+yhkjHMIn9M1ZnfQAkvB5Rha2mwybLVRAj/eGGJ6G33BZXenr+wCmtU0t3F2NgputkoxJo/h89sL",
	"29kYzx9dPs9HCyXpUYqzbBnM6DchMD+93W3feFzCnDEFzNwimKvtUpp8PLO5C7QBhFNVmq8Vzu695W9i",
	"buRigSRHa/yg0XXDQGpNT01jwu0YiDL7H28beHrsOy7Zgbg+5lr0Q2MKLfcq6SDR0rqntlSI4BsJopIO",
	"LhrmQzQDYoqS9NTzc6Z8GiIgIp6+DmqaXlUgKmuEgX3G1a0h2rANw4KmYU5oaXOHKZOqdgitthDeDECS",
	"3jE9DSMIWCq2hQLiNuuG/fTxyoPDCqg11n3SDNPcBue1lalnsKKqVfm0ZraVDVrLjbTRfmwrsEEMjPXY",
	"2hKh0upmIBaIN94Pvkls84WFrj4mORfmXaiPF9sAr70qGBCdVmheuTDwbpKzVXO2Lz4niLh2raY/oc3r",
	"nJciUr4i7EpN9JtwlkWqXng0A2ldsUJmC326TjescfcWlmOnLfJ3MYDDlVi/IhK+e/XdeOdeycnfEkJ1",
	"+PXx02NMOppaycaYZrCJlD0f2HsU3fpKivT3fqYMidc678uS1xN86W796K8Kor9Ogn67xPJXA1FMIB19",
	"6Za/f7RIy0BFS6VqzIXxthI8nwQ65ydSo4OxTDExBmEVTzdPDWmWudcyRtLVIq35KKmNXUtgH72noSL/",
	"c/HXKiP7IsCmC7C9qLy3oPYAvGmKbhwuMxXfC2x20XuNHy35OTx/3eQo/jsh5i6/DEDquiB4SJzNk2Rq",
	"W9DUZsq50KPJA94iyVdqgwXUIWlbI4Og5VYPfsNKRkBkW1c5RVFW8tK8FKQPILatbN6Ori6novdFdf9B",
	"z8EM1e1vAuX4VeAkD6PtYLixB09Fr1jiDsK2eqm8i9AdqG7/ArmvJHoH3Jeu9+Lfyu8OsbD3MoixnURj",
	"9KeQXlyb3798PPrS+LWyCR5P00JwEG1anHgqOKe6Jx6ep53fVHvxWL6uxzJVeb4FNQKZZ9eeg9DZRZG+",
	"4Ohr6tHFeOfQjzqOuD4BkE7HZ+35dPyd1o/xGZMRDu8OUf/xlURc3DBfM/K/N/aZdql4jhVNkf+CSvOS",
	"G/Ii41sg/2Mvfur5MNvesMrJ8twBpT0o26W5Kk+d9b1Q7XrdsL7v9VTXK3YaX0yOP5tL1jY5jHi1RVL3",
	"4KuF1U2zjqOZaX8apf6htf3olsAPt72g8Y+kZRonovXib/gaQTV+r9dflmMpeUqxckLbvptqJAIQ8wDj",
	"v+QN62WG15mh028VrNB31wrtK1RTq3XKTYN/BvFioX91C71KuZh0m7Bv/EXlaxQhE3jX/dmtF5A8z835",
	"swCgikY9RUa8BId2hYDLZ1saQ7ubvlbYPFbReL9/1Hw2f2AKqh0tM57eH8hY0fIaBKahr1AeqBU3I6mn",
	"HvQh8pxfRnCJ1ljesPr3EWIFFuYJL8un82i1uuaPpe4k5Gb+7OqfIY8s5nFMhK2ruDwE2DRaMHsnqEaH",
	"+31h1ZUJfxpMR39N9wWhbYT6eocHLFomsd7mXsHGnfDYK7E4AMO6NMMNexYY9qpEPgl+0V9AfoFdG3ar",
	"WCnDvthyZa+eJPrcdDahfBRtN+y5hJ6v4PgkkHV/pfoFW21s0UjRvj4sbPmzJyGrWfXvKwLLFSp8Eq46",
	"Pyz+Aqs2rO5he1CEixbWW1dVStwJVFWhw0ka0SHJPlTZH5Sq2oxPAlPvx91f4NSGUxEtfVfvHiV6eLWd",
	"Hj4LocrPNCikTGw2B1fHcQ5eqhp+T8JL7zf2/zRPkh4f/y8AAP//LvdmIRWQAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
