// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
