// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
