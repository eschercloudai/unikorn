// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xcbXPbNvL/Khj+/zN3N0NLbtp7cX7nuK0vbe/iie125qKMByJXEmoQYAFQjprRd7/B",
	"A59BirSkOrnqTSKTwGIffljsAgt+CiKepJwBUzK4+BSkWOAEFAjzV0QzqUDc5A/1sxhkJEiqCGfBRXC3",
	"AnTPyCMXDLnWiOEEJkEYEN0gxWoVhIF+FlzkBIMwEPBbRgTEwYUSGYSBjFaQYD3A/wtYBBfB/01Lzqb2",
	"rZxKJQhblvxst2EQcaYEpzcUMxjKqe2CUt2nl98K7QMyvbWkQKrXPCZgdS0AK7iqDPjONjEvOVPAzE+c",
	"ppREWEs1/VVq0T4N5KM9gmWlrie/jkpcTFp62IYByyj1stsi/y1QUIASCLZhoPgjsNuIpweXtaTsk/Ft",
	"CkwqHD0inKkVMOUGQTLiKWFLRNiCi8Q888hrzCdTzqQ1HY4iSBXE79zDNviutOr1AM7sKO8y0WqY49jJ",
	"X6VwED1wLeCr74TgwqcINyya83iDFphQiJHtitaYkthpwM6yBSWR6pbxHUieiQg0cnRLiZ6IWiHMuFqB",
	"yIlU0H1gUaMdwL70T/8WY/KonEk/a5RIhfjCz6I0PBKmQDBMb0GsQRiT/tFwuWQoY/AxhUhBjEA3QzyK",
	"MiEgDlFKAUtAAlIulGGZcfU9z1jPxLhneE4BKY4WhMUII+FQZPsbt/IMGdUm1e6bz3+FSPkkcW7oX8YN",
	"8dwdvKY8erxVXOAlXK4xoXhOKFGb//BjwKIYtjVUP0Yq3qvSEf3Oc6QUhK94kmbqf0KU7z5a9P8b1BMX",
	"j0cUoTnSUAnA9UPMdawL8D3Fay6OyLcbYCi7C9u8zuSbBC+PCQ9LfyiLxLRGaoUVwkIvLEmKFdEOwywt",
	"akWk9pBKL9Z1QX6EzQ0mx1R3PsJQYR5hg1Ldoc7ojeDaRx2R0XyEoYymrr3h0/1xcO4c3f512jWaFKHi",
	"wdkwVL1M1OPCJyyRzKIIpFxk1DCUMb1WckF+rwd+f8g6XOfOBm4Tkw05CjknRUDUWnk7wyFj9BSEqiYm",
	"hLMHRRLw51X6DVIrKFZvozCbb8Saoo2mg4sgxgrODKEwX6RtehQYISkMGQk3khM9mOk7ZjCb4fnG0G/0",
	"lKgKNPGRkAqrTPqJmKCIKWTbDCC3raYZ7y17YUP5xZAfwmaI04hhffbeFWOGAVGQyHFxdsEIFgJvDB/t",
	"NNMT9vmSzFzYRrZZh+PedvMp2qfP6hxsjXcNDASJXAycgJR46Zk74O99ibRs4HpbxhB8TDHTPzgzIvzz",
	"7u7GtYh4bIgDyxLNM2EmO3tw2WRQ90YPESXaA4UmMZXyIQZGIDatZJbq6Bx0X+uzHozgYUFTmqQ5DKRJ",
	"Mx6sBGGgIEm5wILQzUPGXLRGdUPG1cNCR/lBGCSgVjx+0I8wpfypNWoCMcF2yA+eGWVGe6gpq6m7n0HM",
	"uYRc58i+nWvFaa0ZCrutnovVHtALha7w1mNa1hfUjoFzq3OxUfVcQHcH6T3eoj9EH+gzuhXocSBdkfgO",
	"ZTfj77auSdwm0d0fvfl2MnzheJtCB5lhViNxvuvYa7pWcjLIcp7UZKzhmrbos5vNRHaYy+YfnnAjrS6p",
	"Kq349yyZg9CSXd3cy4pKCVOwBKF5WKZdC3LZ+/rmXoaILBDjCklQ2m8IMBkGc3O0TdiHHU02Y+S3DJw0",
	"XZBJIOFi0zHNE54xYy/bChGGrslrPxfd3sIxMBZsodV3wWIv+PIMcxDmivxyLNIcevoAZtJIH77iZvbY",
	"Ec6Cz5o6tHxagV19Te/nhbE7oGIpdyGFx2RBxrBHsVQo73aI8NeS7gBSGKxBSMKZBwXGKsi9RwkoHGOF",
	"2xZ4zOYgGCjomKnleyQhwTrPyan6HfKa6KAiFmTddfBjmyDbpIdYY55UOG0O054ofXPMYa5i34oie+ec",
	"2zEZNOVG7peMnZh21vXNS7cnssPz5zshY4KhvM/BYqBi+2aQZiubN2O1luukT29ui2aH3ortkKbaeuPl",
	"Sw13EzFXnudpUoXkIDd2TfkcU7rJfZnrPy5UauZqORGNUWLdm0lC8vcxTzBhBwuhiv2wQZYvd8PGGj43",
	"qsfwaae923tfn/92TGuk015M88jfY+g5liTKc/9iw8Mrm92ldDRU1y6gaaWlyqgHNjUaopfGboVYYj7B",
	"K+furbFusJRPXMS+Q3dPoFaZJDiOiW6K6U2lyQJTCd1H+7lbcWf6Y9PBXtfW9jw744FcHG9DCVEmiNrc",
	"aidiuVsplb7WGKmbyMuyKIsLiABpt44swOq61qIYR6XHNw1K2fSA5b7XM0Z9q/u8QnPAAoSDY3v4BeVP",
	"Vv1JSklErIHd5pVpdS+oY0deTKdlDDYBzbqIKM/iScSTKU7JdP2V3cSX09TBaxYYIXnagFFwZzgi0gIu",
	"RoojbNfX26rFCxjfv/vpOXyY/2aBsWtuaaNSu5NP2IJ7iie+u71bZBRd3rxBEsSaRIAWXJR7tZlUPCl8",
	"lkSYxej+jYEmURQqe6q2PqAMMIOL4HzyanKeL4I4JcFF8PXkfPK1nhJYrYyecik0q02V9szlOZbQntFW",
	"Art7y6Xq9TtamCUmTKpy2Q2NfAJUJphEGEmyZHoYFiNgkdikCmJktTpjP/xyN0HoTge3FnQrrPtEFJPE",
	"BsMRZ0qPYPx+vfinQJ3zfTNWIRRhhuaAMmnRknJKkdvX9IQIhr0sXQocm4oGPGNVH2RoOPfK89nzJtbK",
	"5FJdpuTnr7RWDEplrt+gUWr06vy8KwAp2k3rZ2XbMPhmSC9PFZLp+tXurt6zsG0Y/H3IuH11LVXfGFy8",
	"7/GK7z9sP4TBxzPGz+Y83pSVWj5cdyyG1kEcHNG3L4/oHW20U6xDNUSSG9o//HKn3y4FZgriGdPPZrlT",
	"nQW2eWhnhY5kEi5AezHNuZ479gjCBoM7UW/+DarFkZtu/FTqJ6ftQsLtaeLUJo5/VdezpjpJ3Hlc2nGG",
	"6D+2q86NJXimxk9Eau9IacfRY45miGs5IFBbZ+Y6Fd60DaVrsEi6qrH/HAT4CwFfEAnfnH+zu3Orzu6P",
	"hFAZ2W4/bLu8oymA1X4RMXjqqMPusT3qNH3hRdq2H+lDuguw277k1W7VtoqCXxRE/xgE/XqF74uBqMsh",
	"TT9Vp+fWooyC8uSatr5T482PtYXgySDAuXiQmPUXywjH5oi+yH70Av5EKHWbHsbLle7M3XeQbdxaBtvI",
	"vWreOBjrwWo1syfHNdxxHWSpuwZ1ANANW+D2hoq3HP8EmRFrXeW21Hv/+GWTqf+ikk5b0swDpfs0xn0u",
	"bJz3UpuURHbr3mWz5ihqgyRfqCcsioM7iRLM8BJiNN9o4jOWsRgE3Wi/pzkgLOOZ2eQlaxCb2oFSY23O",
	"hqB25DJdvWq0PTnIz21RnuZLXk/24O4JDsob6mmDo92L/VY560hXepULcALXl+hKe9KPZvbhcLgHmPzZ",
	"RyeaDurqTjnI5+Tupp/crwFpSXVJdxishoZ4KPqG5BA5/q4qN69PTu1lU4qh6981qB1QOeoCeILMl7oO",
	"hrs7Nr/ssCMN8eBwOATLLKSRe+SkDGMmsIPJcoJ+LAsAi6SEixmTEaY6C/nrky3YzRRPsCIRyl8QaWp6",
	"IUkp30D8N3voUo6H2WbGioQn14xO2WOwXapS5dzZPAiVadCMtfOgfdIg34Q7ZUVfWlZUK+rq35VUlW+R",
	"5OduWEoeEawcBk2byiEkxHryiL/IGWtVLORnhWM2KS2G3S5l/TRGtx60cZlXuJ3w9uIxRXF6O2iD8tD4",
	"64wx9kFI8+rxCSTHOYQ7CgCKxLgTAaf09YgQ6K2ESQVfk1hHgUWt8rR6t+/M3O2bzimPHs+k/RqKv1LS",
	"gsA0RK6h59riiPqAkuia0yzxUJMduEQrLGfMVpvoiK+rmHyc87J6ett5cbL6wZhnObmRn575M5Sk9MRX",
	"Q2Ab2W/e9AHWNTkUVDvJfV5YdR8D2g+mO78odEJoHaH51dsz1nljtzRz6+7ws/DYuu3bA0NUoHDGjgLD",
	"1oXlveDX+RWoE+zqsFt0XdVtuy13c3gv1+eGs7WpO9E2Y8dyevkN5b1A1vxS1wlbdWyRjiupbVjYq8R7",
	"Iat6p/UFgeWu4e6Fq8bH1U6wqsPqETZnqf9Kbmm64h7ws0BVXOMdtCI6JNma98NBqbh5vBeYWh+4O8Gp",
	"Dqe085pvaT0Sa/JqM3z7zIeq4v5Pn5Mye7MJuG+QjMFLcV95L7y0vjP4p7ndsN3+NwAA///0r8D+5VwA",
	"AA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
