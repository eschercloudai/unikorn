// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
