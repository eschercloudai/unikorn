// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"73ewyQGNAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
