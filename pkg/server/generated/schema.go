// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"//9H/F+wM5kAAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
