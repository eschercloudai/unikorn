// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"FwAA//8KITYmuI0AAA==",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
