// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"/Pj4/wEAAP//oX++BpCPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
