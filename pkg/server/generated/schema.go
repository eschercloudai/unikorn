// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"wT1pAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
