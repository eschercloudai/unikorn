// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
