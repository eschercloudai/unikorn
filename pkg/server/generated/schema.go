// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
