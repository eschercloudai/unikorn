// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
