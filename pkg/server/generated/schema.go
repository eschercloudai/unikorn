// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"AP//o3blco2QAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
