// Package generated provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package generated

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/url"
	"path"
	"strings"

	"github.com/getkin/kin-openapi/openapi3"
)

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
