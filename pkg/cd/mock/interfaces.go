// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go
//
// Generated by this command:
//
//	mockgen -source=interfaces.go -destination=mock/interfaces.go -package=mock
//
// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	cd "github.com/eschercloudai/unikorn/pkg/cd"
	gomock "go.uber.org/mock/gomock"
)

// MockDriver is a mock of Driver interface.
type MockDriver struct {
	ctrl     *gomock.Controller
	recorder *MockDriverMockRecorder
}

// MockDriverMockRecorder is the mock recorder for MockDriver.
type MockDriverMockRecorder struct {
	mock *MockDriver
}

// NewMockDriver creates a new mock instance.
func NewMockDriver(ctrl *gomock.Controller) *MockDriver {
	mock := &MockDriver{ctrl: ctrl}
	mock.recorder = &MockDriverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDriver) EXPECT() *MockDriverMockRecorder {
	return m.recorder
}

// CreateOrUpdateCluster mocks base method.
func (m *MockDriver) CreateOrUpdateCluster(ctx context.Context, id *cd.ResourceIdentifier, cluster *cd.Cluster) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateCluster", ctx, id, cluster)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateCluster indicates an expected call of CreateOrUpdateCluster.
func (mr *MockDriverMockRecorder) CreateOrUpdateCluster(ctx, id, cluster any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateCluster", reflect.TypeOf((*MockDriver)(nil).CreateOrUpdateCluster), ctx, id, cluster)
}

// CreateOrUpdateHelmApplication mocks base method.
func (m *MockDriver) CreateOrUpdateHelmApplication(ctx context.Context, id *cd.ResourceIdentifier, app *cd.HelmApplication) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateOrUpdateHelmApplication", ctx, id, app)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateOrUpdateHelmApplication indicates an expected call of CreateOrUpdateHelmApplication.
func (mr *MockDriverMockRecorder) CreateOrUpdateHelmApplication(ctx, id, app any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateOrUpdateHelmApplication", reflect.TypeOf((*MockDriver)(nil).CreateOrUpdateHelmApplication), ctx, id, app)
}

// DeleteCluster mocks base method.
func (m *MockDriver) DeleteCluster(ctx context.Context, id *cd.ResourceIdentifier) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteCluster", ctx, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteCluster indicates an expected call of DeleteCluster.
func (mr *MockDriverMockRecorder) DeleteCluster(ctx, id any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteCluster", reflect.TypeOf((*MockDriver)(nil).DeleteCluster), ctx, id)
}

// DeleteHelmApplication mocks base method.
func (m *MockDriver) DeleteHelmApplication(ctx context.Context, id *cd.ResourceIdentifier, backgroundDelete bool) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteHelmApplication", ctx, id, backgroundDelete)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteHelmApplication indicates an expected call of DeleteHelmApplication.
func (mr *MockDriverMockRecorder) DeleteHelmApplication(ctx, id, backgroundDelete any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteHelmApplication", reflect.TypeOf((*MockDriver)(nil).DeleteHelmApplication), ctx, id, backgroundDelete)
}

// Kind mocks base method.
func (m *MockDriver) Kind() cd.DriverKind {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Kind")
	ret0, _ := ret[0].(cd.DriverKind)
	return ret0
}

// Kind indicates an expected call of Kind.
func (mr *MockDriverMockRecorder) Kind() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Kind", reflect.TypeOf((*MockDriver)(nil).Kind))
}
