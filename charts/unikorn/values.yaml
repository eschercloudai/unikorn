# Set the global container repo.
repository: ghcr.io

# Set the global container repo organization.
organization: eschercloudai

# Set the global container tag.
# Defaults to the chart revision, which should be in lock-step with the
# actual release.
# tag:

# Set the docker configuration, doing so will create a secret and link it
# to the service accounts of all the controllers.  You can do something like:
# --set dockerConfig=$(cat ~/.docker/config.json | base64 -w0)
dockerConfig:

# Set the image pull secret on the service accounts of all the controllers.
# This is an alternative to dockerConfigs, but unlikely to play ball with
# ArgoCD as it's a foreign object that needs pruning.
imagePullSecret:

# Project manager specific configuration.
projectManager:
  # Allows override of the global default image.
  image:

# Control plane manager specific configuration.
controlPlaneManager:
  # Allows override of the global default image.
  image:

# Cluster manager specific configuration.
clusterManager:
  # Allows override of the global default image.
  image:

# Monitor specific configuration.
monitor:
  # Allows override of the global default image.
  image:

# REST server specific configuration.
server:
  # Temporarily block deployment until it's complete.
  enabled: false

  # Allows override of the global default image.
  image:

  # Allows the use of an explicit service account for certain OpenStack operations
  # e.g. application credentials with federated users. Must contain "username" and
  # "password" keys.
  serviceAccountSecretName: unikorn-service-account

  ingress:
    # Sets the ingress class to use.
    ingressClass: nginx

    # A map of explicit annotations to add to the ingress.  By default, when not
    # specified, the chart will create an issuer and add in an annotation to generate
    # self signed TLS secret with cert-manager.  For real life deployments, you will
    # want something like the following e.g. a shared cluster issuer, and external-dns
    # to define the DNS address via DDNS and keep the IP address in sync.
    # annotations:
    #   external-dns.alpha.kubernetes.io/hostname=kubernetes.eschercloud.com
    #   cert-manager.io/issuer: my-cluster-issuer

    # Sets the DNS hosts/X.509 Certs.
    host: kubernetes.eschercloud.com

  # Sets the OTLP endpoint for shipping spans.
  # otlpEndpoint: jaeger-collector.default:4318

  # Allow configuration of application credentials.
  applicationCredentials:
    # Sets the roles to grant to credentials.  It is up to the Openstack administrator
    # to ensure users have these roles so they can grant them to the credential.
    roles:
    - _member_
    - member
    - load-balancer_member

  # imageSigningKey allows the ESCDA key to be set and images to be filtered based
  # on signature.
  # TODO: this is only temporary, we'd probably expect this to come from a secret
  # managed by vault.
  imageSigningKey: LS0tLS1CRUdJTiBQVUJMSUMgS0VZLS0tLS0KTUhZd0VBWUhLb1pJemowQ0FRWUZLNEVFQUNJRFlnQUVmOGs4RVY1TUg4M1BncThYd0JGUTd5YkU2NTEzRlh0awpHaG1jalp4WmYzbU5QOE0vb3VBbE0vZHdYWGpFeXZTNlJhVHdoT3A0aTdHL3VvbE5ZL0RJSCt1elc2VXNxR3VHClFpSW11Tm9BdzFSS1NQcEtyNWlJVXU2eEc1cDR3U3E5Ci0tLS0tRU5EIFBVQkxJQyBLRVktLS0tLQo=

  keystone:
    endpoint: "https://nl1.eschercloud.com:5000"
    userDomain: "Default"

  # SSO authorization configuration.
  # authorization:
  #   backend:
  #     OIDC authentication backend.
  #     oidc:
  #       # Client ID issued by the authorization server.
  #       clientID: ""
  #       # Issuer that creates id_tokens for validation.
  #       issuer: ""
  #       # Where to redirect to in order to get a code.
  #       authorizationEndpoint: ""
  #       # Where to call to exchange a code for a token.
  #       tokenEndpoint: ""
  #       # Where to get the java web key set for validation of id_tokens.
  #       jwksURL: ""
  #   frontend:
  #     OAuth2 authorization frontend.
  #     oauth2:
  #       # Client ID of the UI (or another client).
  #       clientID: ""
  #       # Secure redirect URI of the client that does the code exchange.
  #       redirectURI: ""

# UI that works with the server.
ui:
  # Temporarily block deployment until it's complete.
  enabled: false

# Defines Prometheus monitoring integration.
monitoring:
  # Enable monitoring, ensure Prometheus is installed first to define the CRDs.
  enabled: false

  # Set the namespace to generate the service monitor into.
  namespace: monitoring

  # Define service monitor configuration.
  serviceMonitor:

    # Labels required to be selected by Prometheus, this is compatible with
    # kube-prometheus defaults.
    labels:
      release: prometheus
